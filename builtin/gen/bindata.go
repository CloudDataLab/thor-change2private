// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/AuthorityNative.abi
// compiled/AuthorityNative.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/EnergyNative.abi
// compiled/EnergyNative.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Extension.abi
// compiled/Extension.bin-runtime
// compiled/ExtensionNative.abi
// compiled/ExtensionNative.bin-runtime
// compiled/Measure.abi
// compiled/Measure.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin-runtime
// compiled/Prototype.abi
// compiled/Prototype.bin-runtime
// compiled/PrototypeEvent.abi
// compiled/PrototypeEvent.bin-runtime
// compiled/PrototypeNative.abi
// compiled/PrototypeNative.bin-runtime
// compiled/Trader.abi
// compiled/Trader.bin-runtime
// compiled/TraderNative.abi
// compiled/TraderNative.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x41\x6f\xf2\x30\x0c\x86\xff\x8b\xcf\x39\x7d\xdf\xad\xd7\x9d\x76\xe0\x17\x20\x34\x99\xc6\x20\x6b\xc5\xae\x62\xa7\xa3\x42\xfc\xf7\x89\xa9\xb4\x01\xc1\xc6\x34\x75\xbb\x55\xca\xeb\xe6\xc9\xfb\x24\xcb\x03\xd4\x2a\xe6\x28\x0e\x95\xa7\x4c\x01\x58\xda\xec\x06\xd5\x72\x15\x40\x70\x47\x50\xc1\x86\x93\x39\x04\xd0\xec\xc3\xda\xe1\xbc\x04\x01\xbc\x6f\x4f\x5f\x18\x63\x22\x33\x38\xae\x02\xb4\xd8\xe3\xba\x21\xa8\x36\xd8\x18\x05\x30\x47\xa7\x45\x76\x5c\x73\xc3\xde\x43\x05\x1d\xd3\xdb\x34\xbb\xc9\x52\x3b\xab\xc0\x31\x94\x40\xc3\xf4\x48\x34\xee\xfa\x22\x1a\x69\x81\xe6\x94\x6e\x03\x0c\xb9\x44\x9d\xbe\xd2\x05\xf9\x43\x74\xa2\x72\x0e\xcd\xc4\x18\xa6\x1c\x49\xd4\x64\xfa\x45\x8a\x23\x89\x9f\xe8\xc6\xd4\xba\x77\xb2\xff\xff\x2e\x52\xa7\x3d\x9f\xdb\x29\x63\x9e\x58\xb6\x65\x25\x18\xe3\xac\x7d\x5c\x5d\xa2\x6f\x2b\x13\xda\xff\xc5\x55\xfb\x29\xf6\x96\xee\x50\x37\x6c\x4e\xb1\xb0\xa6\xda\x94\xca\x1e\xb2\xff\x90\xfc\x7b\xee\xa7\x04\xd6\xce\x1d\x5d\xb3\xcc\x56\xe2\xd4\x0e\xed\xa9\xce\xfe\x71\xc8\xdf\x11\x8b\xa2\xd2\xef\x34\xdb\xad\x07\xca\x12\x69\x4f\xf1\xcc\x5b\xd4\xf7\xd9\x73\x1d\xa7\x86\x1f\x16\x9d\xaa\xdc\x10\x33\x9d\xfe\x09\x25\x72\x44\x2f\x9a\xa7\x8e\xc4\xe1\xb8\x7a\x0f\x00\x00\xff\xff\x6e\x27\xb2\x89\x80\x05\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x09\x72\xe3\x38\x0c\xfc\x12\x40\x5c\xe4\x73\x78\xfe\xff\x09\x5b\x20\x15\x5b\x8e\x33\xb6\xa5\x4d\xbc\xa9\x1d\xab\x12\xbb\x20\x5e\xe8\x6e\x80\x10\xa5\x10\x41\x81\x41\x82\x02\x30\x29\x82\x22\x80\x45\x31\x05\x00\x12\xab\x80\x70\xf2\x93\x00\x58\x69\x6c\x1f\xd4\x08\x4a\xd4\x06\xb7\x36\x18\x79\xce\xd3\xc4\xdc\x6a\x9c\xe3\x40\xa0\x65\x6d\xbc\x59\x93\x01\x73\x6b\xd3\x8a\x68\xcb\x9a\x8b\x51\x27\xd4\x65\xad\x7d\x59\x6b\x28\x35\xf4\x51\xa7\x35\x08\x6e\x56\xe2\x0a\xb1\xcb\xb4\x92\x8a\x98\x14\xf7\x2b\xc2\x68\x52\x88\x23\xa0\xf8\x8c\x31\x2d\x7f\x97\x5d\x26\x06\x29\x78\x9f\x52\x45\xbd\x0f\x83\x60\x84\x18\xec\xe2\xcf\xb3\x0f\xea\x91\xb6\x11\x9d\x81\x00\x80\x09\x05\x04\x3e\x66\x4c\x08\x94\x60\xd0\x7e\xb5\x1d\xee\x56\x8b\x28\xce\x5f\x04\x52\xa0\x88\x80\x09\x22\x44\xe7\xef\xc0\x1a\x12\x6c\x2b\x80\x14\x12\x26\x90\x79\x29\x02\x6b\x70\x14\x00\x76\xab\xc0\x40\xf7\xab\xa8\xf5\xfb\x57\xf1\x1d\xfd\x7d\x9d\x98\xbe\xbe\x77\xb5\xc5\x00\xf8\xc9\x32\xa3\x03\x07\xa0\x5b\x26\x1b\x0c\x1b\x4f\x8b\xa1\x04\xee\xe7\x8a\xa0\x08\x89\xb6\x71\xf1\xca\x67\xa4\x48\xae\x9c\xc8\x64\x3e\xc3\xe2\xf7\xe3\x4a\x38\x7b\x84\x1d\xda\x56\xcb\x3d\xda\x2d\xdf\xa1\x1d\x60\xfc\x20\xe7\x75\xfc\x3e\xe5\x07\x69\xf7\x28\xa4\xf0\x83\x28\xb4\x56\x6e\x50\x50\x94\x75\xed\xf8\x3d\x34\xd3\x39\x64\x22\x7f\x28\xf8\xe3\x7b\x77\x0f\x3e\x74\xf6\xc5\xda\x42\x44\xa0\x18\x24\x44\x9e\x9a\xc4\x5b\xb4\xe3\x54\xf0\x4e\xed\x14\xc9\x67\x90\x12\x29\x22\x2e\xd4\x29\xa8\x67\x53\xd7\xae\xf7\x8f\x0c\xdb\x18\x0b\xed\x89\x13\xc1\xc4\xe9\xa2\xea\xf9\xb7\xee\x7b\xfc\x78\xee\x5f\x63\x09\x6d\x63\x91\xcf\xad\x73\xdd\x73\x7e\xdf\x7a\x7c\xa7\xc9\x40\xb7\xfe\x4d\x55\x14\x81\xa4\xfb\xb8\x79\xa8\x13\x32\xbc\xd3\x09\x59\x56\x84\xc1\xfd\xb7\xa8\x7a\xee\xaf\x70\x64\x4c\xa5\x81\x60\xd0\x6b\xdf\x46\xc3\xfd\xee\xfa\x6f\x76\x6a\x08\x6b\xbd\xc0\x2b\xd3\x5d\xf0\x21\x8f\xa9\x89\xa4\x45\xa0\x82\xb2\x21\xcc\x21\xdc\x22\x2c\x79\xe0\xf5\x2e\xa9\x18\xb5\x75\x9f\xfa\xfa\xb5\xb5\xdb\x71\xe7\x76\x57\xd1\xa6\x33\xe6\xba\x1f\xf3\x1a\xcb\x7b\x8d\xee\xe3\x73\xa9\x6c\xf2\xe9\x7b\xd4\x8e\xdf\x23\xa8\x12\x1d\x69\x8d\x1c\x5d\x4d\x62\x2a\x26\x87\xf9\x83\xd0\x3c\x94\x4b\x0c\x1b\xc2\xe1\x27\x18\x7c\xaf\xae\x5f\x50\x8b\x50\x7a\xa0\x16\xe1\x76\x42\x2d\xa2\x74\x4c\x2d\x28\x52\x3c\x3b\xae\x12\xd7\xfb\xfa\xa8\x36\x20\x56\xb2\x94\x4f\x03\x7f\x83\x3b\x7c\xce\xbb\x0a\x94\xf7\xb9\xda\x86\x06\x13\x4d\x5a\x8d\x35\x69\xa7\x1c\xc0\x3c\xc1\xa2\x5b\xe7\x2f\x0a\xe0\x09\x57\x45\xc9\xc4\x58\x87\x85\x50\x03\xcc\x6f\xd0\x7e\x1d\xcd\x86\x0e\x65\x95\x00\xda\x14\x8d\x8c\x55\x66\x9b\xe1\xfd\xfc\x5b\xd5\xc7\xd2\xae\x73\x14\x23\x15\xe5\xcf\x6b\x5f\xf8\xfe\x21\x4f\x79\x95\x7c\x50\xe3\x3d\x29\x42\x81\xfa\x97\x69\x5c\x73\x79\xa0\x71\x2d\xe3\x84\xc6\xb5\xc9\x51\x8d\xcf\x7e\x26\xf9\x7d\xfa\x46\x7a\xa6\x6f\xed\x3a\xa6\x1e\xab\xa6\xa5\xd2\x5b\x15\xde\xcf\x27\xf0\x60\xef\x74\x24\x0e\x69\xd2\x46\x4f\x3d\xe4\xc6\x91\x73\xcf\xdd\xa4\x64\x13\xb6\x54\x31\xb5\x50\x4b\xb1\xc8\x25\xc5\x12\x46\xe7\x12\xb8\xd5\x08\x99\x6b\xac\x03\x39\x34\xae\x29\x24\xbe\xb0\x0f\x36\x66\x8c\xaa\x0e\x2d\x8f\xfd\x78\xc9\xbf\x3b\xef\x72\x90\xb5\xa3\x79\x4b\x3e\xb6\x33\xad\xea\x4f\x11\xe2\x5b\xf9\xaf\x4f\xf9\x4f\xda\x4d\x15\x9d\x7f\xe5\xa5\x87\xfb\xbc\x75\x84\xff\x89\xce\xc1\x7d\xfb\x8a\x4e\x4f\x6f\x44\x27\x1d\x46\x67\x9f\xaf\xc7\x15\x97\x63\xe8\x78\x65\x0d\xc1\x73\xf0\x7a\x5e\xd8\xf9\x9f\xf4\x77\xfb\x9f\x5c\x1b\xda\xbd\x85\xb1\xa5\x73\xfe\xfb\xb3\xce\xde\xe7\x4e\x6f\xf4\xd9\xce\x46\x04\x27\xfb\xc3\x7c\x4f\x7d\x76\x1f\xcb\x7b\x2a\xe0\x0d\xd3\x1c\xdb\x1b\x31\x7d\x5a\x45\xdd\xd5\x4c\x9f\xea\xaa\xaf\x2b\x9f\x47\x98\x1e\xad\x7c\x62\xeb\x9a\x73\x0e\x51\xd6\xb5\x8d\x28\x3f\x54\xff\xbc\xe5\xdc\xe1\x0d\x73\xd0\x0b\x67\x1b\xd7\x73\x0c\x3a\x7d\x8e\x51\x62\x7e\x7a\x8e\x51\x74\xbc\x74\x8e\x51\x8a\x9d\x3e\xc7\x90\xdb\x53\x8c\x17\x6a\xcb\xd2\x1e\x3d\x3f\x95\x7e\xe6\xf9\xa9\xc2\xe1\xe7\xa7\xd5\x2f\xc6\x5f\x95\x49\x51\xeb\x8c\x6e\x54\xb6\xb4\x65\x81\x59\x65\x1a\x7d\x3d\xdf\xd3\xda\xf2\x50\x36\xfc\xde\xda\xd2\xbd\xd0\x27\xf5\xf1\x33\x3c\x9f\xd4\x96\xeb\xd2\x73\xe7\x4f\xb9\x51\x6e\xda\x9b\x6b\xfd\x2f\x7a\xb6\x6b\xe9\x51\xfc\xb5\x7c\x26\xfe\x5a\x3d\x18\x7f\x69\xbd\x2d\xd8\xb1\xe7\x11\xe3\x95\x9e\xc2\x19\x2e\x7b\x57\x05\x8e\x10\xed\xff\xc3\x25\x3c\xe7\xb2\xdb\x78\xc0\x65\x4f\xf4\x2a\x97\x00\x31\xac\x16\x38\x30\xf9\x7f\xdf\x59\x50\xd7\x5b\xa4\xf5\x46\xc8\xdb\xe7\x2b\xe7\xbd\xb4\x57\x39\x3f\x62\x53\xbe\x72\x15\x11\x71\xcd\x35\x6e\xf5\x15\x2e\xbb\xdc\xb6\xe3\x45\xbe\xb4\x1d\x90\x6e\xd7\x35\xab\x96\x99\x8b\x21\x44\x02\xc4\xdb\x39\x02\x22\xda\xea\x39\x1f\x86\xf7\x68\x6e\xeb\xfa\xc8\xd9\x7f\x54\x33\x7f\xf1\x87\x89\x92\xcc\x76\x7c\x3e\x47\xa5\x90\x51\x47\xcb\xff\xf9\x19\xf9\x28\xfc\x40\x69\xa3\xc6\x13\x59\x63\xb4\x7e\xee\x8c\x1c\x20\xa3\x8a\x06\xcb\x96\x2d\x10\x48\x0c\x00\x69\x98\xe6\x40\x92\x71\xf4\x2c\x9d\x78\x34\x1a\x79\x74\xaa\xb5\xd5\x90\x6b\x33\x8d\x49\x00\x73\x4f\x80\x4c\x16\x4a\x89\x50\x87\x02\xe3\x68\xc2\x00\x21\xfd\x13\x00\x00\xff\xff\xa0\x5d\x1b\x21\x40\x20\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\xb1\x6e\x83\x40\x0c\x86\xdf\xc5\xf3\x4d\xed\xc6\xde\xa1\x43\x9e\x20\x8a\x2a\xc3\x99\xe8\x54\x6a\xa3\xb3\x8f\x06\x45\x79\xf7\x0a\xda\x06\x14\x10\xa8\x11\x6a\xbb\xc2\x6f\xf3\xf9\xf7\x6f\xf6\x67\x28\x84\xd5\x90\x0d\x32\x8b\x89\x1c\x04\xae\x93\x29\x64\xfb\x33\x30\xbe\x11\x64\xc0\xe2\x69\x87\x6a\x14\xc1\x81\xb5\x75\xf7\x0c\xbd\x8f\xa4\x0a\x97\x83\xbb\xca\xd0\x42\x43\x2f\x41\x9f\xd8\x4b\x54\xf2\xe0\x40\x92\xdd\x76\x1b\x7a\xe4\x22\x55\xdf\xa0\xc6\x16\xf3\x8a\x20\x2b\xb1\x52\x72\xa0\x86\x46\xbb\x64\x98\x87\x2a\x58\x0b\x19\x34\x81\xde\x87\xc2\x32\x71\x61\x41\x18\x2e\x6e\xcc\xff\x55\xfd\xc3\x01\xdc\x55\x46\x3d\xb7\x2c\x8b\x82\x27\xb6\x0e\x6a\x18\xa3\x35\xd2\xc7\x87\xb1\xa8\xfb\xe0\x73\x3d\x48\xd4\x62\xe0\xe3\x8c\x59\xe8\xb7\x74\x89\x85\xbf\x45\x6b\x5e\xdd\xec\x7a\x02\x46\x27\x2a\x92\xf5\x5e\x2c\xd2\x8d\x73\xb0\xd1\x1a\xb7\x89\x21\xd3\xc9\xfe\x00\xfe\xbe\x0c\x4e\xe8\x23\x35\xf2\x4a\xff\x22\x1a\x77\x4e\x70\xa4\x55\xfb\x3f\xf1\xdd\xd2\x62\xe6\x5e\xce\xdc\xdb\xf4\xd2\x66\x0b\x37\xfe\xdf\xac\xdd\x50\x19\xa2\xfe\x52\x06\x0f\x1f\x01\x00\x00\xff\xff\x20\x42\xa8\x0d\xc9\x05\x00\x00")

func compiledAuthoritynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeAbi,
		"compiled/AuthorityNative.abi",
	)
}

func compiledAuthoritynativeAbi() (*asset, error) {
	bytes, err := compiledAuthoritynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledAuthoritynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeBinRuntime,
		"compiled/AuthorityNative.bin-runtime",
	)
}

func compiledAuthoritynativeBinRuntime() (*asset, error) {
	bytes, err := compiledAuthoritynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcb\xaa\x14\x31\x10\xfd\x97\x5a\x67\x25\x28\xd2\x3b\x5d\xb8\x13\x17\xba\xbb\x0c\x52\xdd\x5d\x2d\x81\xa4\x2a\x24\x95\x19\x9b\xcb\xfd\x77\x99\xb9\xfd\x42\xfb\xe5\x38\x32\xb3\xea\x86\x7a\x9e\x53\x75\x92\x3c\x3d\x43\x25\x9c\x14\x59\xa1\xd0\x98\xc9\x80\xe5\x90\x35\x41\xf1\x74\x30\xc0\xe8\x09\x8a\xd7\x8f\x01\xc9\xda\x99\x9e\x7b\x0b\x18\xd0\x36\x9c\xff\x92\x46\xcb\x3f\xe0\xe5\x60\x20\x60\x8b\xa5\x23\x28\x1a\x74\x89\x0c\x24\x45\xa5\xcf\x59\xb1\xb4\xce\x6a\x0b\x05\x84\x1c\x69\x0c\x6d\x32\x57\x6a\x85\xe1\xc5\x4c\xdb\xe9\xa2\x87\x7e\x86\xa2\xdf\x53\x20\xae\x29\x8e\x19\xb0\xae\x23\xa5\x74\x49\xd0\x3b\x1d\xd1\xe5\x49\x91\x6c\x59\xdf\xbc\x7d\x77\x69\xb0\x73\xc1\x10\xa2\x1c\x17\x90\xa5\x5c\x55\xe7\x94\x43\x82\x52\xc4\xed\x84\xc7\xc2\xbd\xd3\x16\xc8\x45\xce\x55\x14\xdd\xd7\x1c\x82\x6b\xb7\xa8\x9f\x42\xdb\x6e\xee\x68\xe9\xf4\x0f\xdc\x37\x51\xfc\x3a\xf1\x2a\xeb\x76\xf4\x92\x59\x57\x27\xa3\x11\x39\x35\x14\x3f\xbd\x16\x7b\xc0\xf1\xd4\x54\x59\x8f\x2e\xed\x99\xcd\xfb\x5b\xaa\xe2\xb7\x8e\x46\x5a\xe5\xc4\xb3\x92\x18\x7b\x2e\xd1\x21\x57\xf4\xa5\x99\x6f\xba\x33\xff\xd7\xbd\x5a\xe4\x33\xb5\xbe\x14\xf7\x48\x87\xcc\x0d\xd7\xf8\xae\x2b\x7c\x67\x29\xfb\xc7\x3e\x61\x3f\xe6\xc8\x54\xdf\xe1\x84\xfd\x6b\x1d\x9b\x3d\xf7\xdf\xe4\x72\x73\x4e\x4e\x9d\x9e\x67\xb0\x45\xf2\x68\xf9\x2c\xa6\xdb\x83\x44\x16\x6e\xbd\xe4\x34\xb7\x7c\x96\x6b\xfa\x49\x75\x4f\xc0\xf6\x2e\x2e\x04\x2c\xad\xe6\xe0\xde\x95\xde\xff\x1c\xf8\x36\xaa\xb5\x73\xa2\x23\xb1\x5e\x0d\x69\x65\x90\x0b\x11\xab\xef\x9a\xeb\x81\x7d\xb8\xbc\x73\xd0\xfd\x01\xec\xf0\x2b\x00\x00\xff\xff\x66\xc7\x72\x63\xff\x09\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x09\x7a\xf2\x38\x0c\xbd\x92\x16\x6b\x3b\x8e\xd7\xfb\x1f\x61\x3e\xc7\x81\x42\xe9\x4f\x09\x74\x99\x99\x3f\xf9\xda\x52\xe1\xc8\xf2\xf3\xd3\x93\x1c\x05\x07\x85\x04\x42\x0a\x90\x58\x11\x14\x01\xf2\x10\x53\x00\x60\xb1\x0a\x08\x4f\x5e\x01\x90\x94\xc7\x7e\xa1\x3a\x28\x83\x8e\xd6\x3a\x30\xa6\x39\x4f\x49\x62\x9b\x35\xa4\x67\x2b\xcb\x8a\x69\xb7\xa2\xa3\x42\x6b\x6d\x59\x73\x2c\x2b\x71\x71\xa3\x93\xb5\xed\x63\x19\xb9\x76\x51\xdb\xac\x24\xfb\x58\x83\x0c\x4e\x8c\xcb\xea\x79\x59\x43\x9a\x47\x49\xbb\xb5\xe3\xb2\xe6\x00\x89\x5a\xca\x66\x65\xdb\xad\xa5\xb0\x98\xf3\x6e\x6d\xba\xac\xcd\x03\x59\xea\x8a\x21\x49\xd9\xad\x4d\xa9\x37\xee\xcb\xea\x2a\x26\x65\xa2\xe8\x30\x9a\x14\x4e\x0e\x28\x73\xd5\x15\x16\xba\xcb\x2e\x1b\xe2\x35\xe6\x33\xa3\x89\xce\x67\x12\x08\xfa\xb6\x33\x04\x80\x4e\x8e\xc0\x4e\x42\xce\x8e\x8e\x32\x7f\x68\x7d\x17\x28\xe0\x20\x18\xfb\xd8\x00\x07\x67\xe7\xe9\x5f\xca\x1c\x8f\x6b\x56\x84\x0d\x13\x27\xd8\x9e\xf7\x04\xbb\x0f\xc7\xf9\xd4\x8a\xa2\xf7\x39\xbf\xc0\xba\x63\xfb\x59\xdf\x2b\xe0\xb6\x83\xcb\x17\xeb\xee\x8b\xe7\xdc\x3a\x63\xe4\x6d\x7e\xde\x66\x02\xc8\xc0\x18\xa8\xd7\x71\x4e\xcf\x41\xcb\xf7\x69\x8d\x81\xc0\x01\x83\x2f\xf0\x99\x23\xdf\xe3\x83\x3e\x26\x3f\x1d\x58\x81\x57\x44\x13\x1f\x16\x3b\xf3\xeb\xb3\x0b\xf5\x0d\xa3\xa0\xd8\x3c\xb0\xbc\xb7\xed\xd1\x21\x08\xe7\xab\xbd\x20\x94\x75\xbf\x5b\xd3\xdd\x95\x14\xb9\x5d\x49\xe9\x33\xc9\xa8\x5c\x7b\x3f\xe2\xb5\xdf\xe2\x43\xfc\x4d\xf8\x7c\x1b\xbe\xda\xf0\x65\x7c\x49\x6f\xf1\x25\x9d\xf8\xba\xca\xb5\x77\x85\x19\xe1\xfa\x7d\x64\x86\xd0\xdb\x19\x6a\xf9\x7a\xac\xcf\xb8\xb8\xf6\xa7\x99\x41\xbd\xdd\x46\x3b\x54\x11\x22\x7d\x9f\xb2\xf0\x59\x0d\xfe\xac\x2c\x8c\xe5\x21\x65\x61\xe5\x6f\x54\x16\xb6\x5b\x7c\xb8\xd4\x1f\x56\x96\xf0\xd7\x95\x85\x3b\xdd\xac\x24\x25\xfc\x8f\x69\x40\xe4\xd7\x35\x20\xa9\xdd\x22\x61\xf3\x77\x51\x7b\x3a\x93\x52\x7c\x80\x6f\xb7\x7f\x1f\xbe\x67\x2c\x2b\xb4\xa3\xab\x55\xd0\xcd\xba\xb2\x7c\xae\x68\x75\x82\x53\x1d\xe0\x22\xc3\x6c\x88\xaa\x48\x52\xd7\x61\xf4\x4c\x27\x38\x7d\x9d\xb2\x7e\x45\x39\x6d\x0b\x5f\xe6\x23\xeb\x3f\x32\xf6\x02\x01\x78\xfb\x3c\x67\x25\xd8\xe6\x3e\x84\xfc\x57\xcd\xec\x73\xd7\x44\xc0\xe9\x88\xc7\x83\x28\x0d\xaf\x52\x3a\x76\xe9\xa5\x57\x6b\x52\x1a\xa6\x61\x98\xc8\x1a\x76\x4f\x83\x5b\x9b\x3d\x78\x85\x61\x85\x28\xb0\x4b\x21\x80\x5c\xbd\x5a\xe5\x12\x24\x9e\x1e\x65\x52\x9e\x15\x61\x63\xe2\x64\xe4\xc6\xc7\x7d\x87\x19\x8e\xc4\xac\x2c\x41\x85\x3d\xea\xee\x1f\x2f\xcf\x0e\xaf\x9c\x43\x60\x5f\x01\xa4\xb9\x07\x74\x8e\xdf\x79\xe6\xf1\xc6\x04\x73\xe0\x82\xb2\x67\xbf\x06\x5e\x67\xbf\xe4\x81\x6f\xdf\x66\x11\xe3\xb6\xb3\xb7\xaf\x4f\xfb\xb8\x8b\x0a\x34\xed\x73\xb7\xf7\x2a\xa9\xa5\x5c\xfa\x7c\xd3\x8f\xcb\x0a\x7b\x99\xd3\x1f\x67\x8b\x1f\xe2\xe1\x57\x66\xcb\xef\xe4\xa9\xa4\x89\xdf\xbc\x15\xc1\xea\xd6\x8d\x4d\x74\x6d\x80\x57\xb6\xc8\x4f\x93\xe2\x8d\x13\x1f\xf5\x43\xb3\x2b\x79\x8b\xc5\xc1\x86\x92\x89\x86\x56\x4b\x1a\xda\x39\x13\xcc\xbf\xc6\x26\x3a\xaf\x50\xd6\x50\xd1\x6e\x89\x40\x51\xab\x56\x1d\x66\x8a\xda\x95\x55\x4e\x1a\x78\x47\x91\x37\x56\xfc\x9d\xbb\xbc\xad\x9a\x9c\x24\x01\xaf\x3e\xee\xa4\x92\xb3\x23\x96\xec\x69\xde\xb3\xca\x05\xef\x19\xb1\x14\x87\x4f\x5d\xdf\x29\x4f\x14\x90\xae\x33\xe7\xa8\x0a\xf5\xae\x3a\xab\xfc\xec\x3b\xb7\xfd\xa1\xef\xd0\x21\x3f\xa8\xff\x4f\x22\xbd\xf3\xec\x01\xcd\x0b\x28\x77\x34\x2f\x70\x3c\xa1\x79\xc1\xf2\x84\xe6\xad\xff\xf4\x93\xfe\x24\x5d\xf7\x27\x92\x92\xa7\xf1\x8a\x16\xbc\x57\xdc\x19\x7f\x18\xf3\x1f\x98\xf7\xbe\xd6\x1d\xca\x1b\x4f\x47\x46\x63\xf2\x19\x4d\x6e\x4d\x4c\x0e\xce\x74\x94\xfd\x20\x11\x02\x3d\x5c\xff\x2a\xf6\x67\xcf\x77\xd8\x9f\xa3\x3f\xc1\xfe\x5c\xd2\x31\xf6\x1f\xe3\x84\x94\xbd\x2a\x16\xc1\x9f\xab\x8a\x04\x9f\x55\x45\x63\x15\xad\xaa\x04\xf3\xb4\x40\xa0\x4d\xd1\xd8\x92\xca\xfc\xcf\x48\xc5\x70\x3e\x33\x3f\x69\x7a\xa4\x2a\x6e\x6b\xac\x8f\xd7\x80\xa3\x9c\x47\xf6\x96\x1a\xfc\x7e\xdf\x59\x6a\xbb\xc3\xc2\xd2\xf1\x09\x16\x96\x61\x2f\xf5\x9d\xab\x36\x1f\xd2\xab\x2f\xed\x0a\x7e\xa9\xeb\xfc\x48\xe3\x1d\x11\x37\x4c\x7b\xce\x62\x47\x59\xc6\xd1\x1b\x78\x13\x4f\xe7\xce\x82\xbf\x49\x5b\x7f\x00\xb3\xab\x53\xe1\xf9\xcd\xdb\x03\x1c\x6f\x3c\xee\x70\xbc\x09\x3f\xc1\xf1\xa6\x71\x8c\xe3\xbb\x72\xb6\xde\x7f\xf0\x3c\xd1\x5e\x38\x4f\xd0\x76\xa2\x38\x9f\x25\x00\x1e\x3b\x4f\x1c\x56\xc2\xda\xdb\xc8\x15\xd7\x7b\xde\xff\x27\x47\xe1\x73\x8e\xf6\xbb\xe7\xff\xfe\xd9\xf9\x7f\x32\xf0\x50\xc4\x07\xdf\xed\xb4\x36\x48\x28\x37\x2c\x9d\xaa\x47\xd1\xa8\x54\x40\x7d\x54\x36\x6f\x39\x87\x50\xc9\x36\x9b\xbf\x9a\x32\xa2\x92\x0f\x91\x9c\xda\x10\xe2\xc2\x7d\x9c\xf7\xf6\x81\x77\x3b\xa7\xca\x0a\x90\x51\x45\xc9\xb2\x65\x23\x06\x71\x82\x84\xd1\x7a\x8e\x54\x5b\x1d\x5a\x33\x15\x57\x89\x68\x03\x4a\xa4\x30\x75\x41\x8e\x51\x47\x6e\x52\x4a\xed\x23\xa1\x45\xa5\x56\x6a\xa3\xce\x65\x98\x01\x50\xfc\x13\x00\x00\xff\xff\x91\xe0\x12\x94\x80\x1e\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x41\x4b\x03\x31\x10\x85\xff\xcb\x9c\x73\x12\xf4\x90\xa3\x77\x4f\x1e\x4b\x91\xd9\xee\x54\x02\xd9\x99\xb0\xf3\xa6\xb2\x94\xfe\x77\x11\x5c\x4a\xb5\xd8\x15\x45\x7b\x0c\xbc\x17\xbe\x2f\x33\x59\xed\x69\x63\xea\x60\x05\x65\x8c\x21\x89\x8a\xb6\x80\x53\x5e\xed\x49\x79\x10\xca\xc4\x7d\x3f\x52\x22\x4c\x6d\x3e\x89\x3b\x1d\xd6\x69\x0e\x28\xa3\xec\xe4\x69\x60\x87\xbc\x25\x2d\xf0\xf1\x8e\xf3\xfd\xc6\x13\x77\x55\x28\x6f\xb9\xba\x24\x72\x30\xe4\x21\xc0\x5d\xa9\x05\x13\x65\xda\x15\x79\x39\x76\xb7\xa1\x1b\x14\x53\x3a\xa4\x2f\xc0\x3f\x81\xc1\xc0\xf5\x3e\x46\x95\xfe\x12\x5d\x14\xc5\xcd\xed\xdd\x6f\xd2\xbd\xb7\x17\xbf\x6b\x3a\x06\x06\x0b\xc5\x79\xb8\x53\x43\xee\x4f\xcd\x16\xd1\xab\xe9\x1c\xba\x06\x07\x8f\xee\xd2\x74\x3a\xb3\xba\x70\x34\xdf\x90\x5b\xb4\x3e\x8f\xd1\x5a\x9d\xfe\x61\x7d\x7e\xfa\x2b\x9f\x05\x7f\x43\xbd\x7e\x0d\x00\x00\xff\xff\x39\x77\x62\x59\x4d\x04\x00\x00")

func compiledEnergynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeAbi,
		"compiled/EnergyNative.abi",
	)
}

func compiledEnergynativeAbi() (*asset, error) {
	bytes, err := compiledEnergynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledEnergynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeBinRuntime,
		"compiled/EnergyNative.bin-runtime",
	)
}

func compiledEnergynativeBinRuntime() (*asset, error) {
	bytes, err := compiledEnergynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x3d\x6f\xdb\x40\x0c\xfd\x2f\x9c\x35\xb5\x45\x51\x68\x33\xd2\xa5\x43\x01\x4f\x5d\x82\xc0\xa0\x75\x4c\x7a\xa8\x4c\xaa\x77\x3c\x25\x42\x90\xff\x5e\xc4\xd2\xf5\x24\xeb\xa3\x6e\x6a\x58\xe8\x66\xc0\x8f\x4f\x8f\x8f\x8f\xbc\xdb\x67\x28\x84\xbd\x22\x2b\xe4\xea\x02\x65\x60\xb9\x0a\xea\x21\xbf\x7d\x06\xc6\x03\x41\x0e\x90\x81\x36\xd5\xeb\x2f\x34\xc6\x91\xf7\xf0\x72\x97\xc5\x3f\xb1\xaa\x9c\xd4\xe4\x3c\x64\x20\x41\x4f\x6b\xad\x21\x56\xab\x4d\xe2\xd8\x37\x4a\xfe\xfd\x3b\x78\xc9\x12\x88\xb7\xf2\x48\xae\x87\x11\x29\x8f\x1f\xa9\xb0\xc1\x7d\x49\x90\xdf\x63\xe9\x29\x03\xaf\xa8\xf4\x35\x28\xee\x6d\xf9\xca\x9a\x43\x6d\xe9\x31\x15\xde\x07\x2e\xd4\x0a\x1f\xd9\x67\x3b\x1b\xab\xbf\x91\xc0\x3a\xdd\x41\x22\x0f\x96\xf5\xd3\x25\x65\x75\xd5\x63\xc7\x77\x51\xd7\xa2\xf5\x8e\x6a\xf9\x41\x9b\x04\x4d\xea\xcf\xd2\xc8\xc2\x11\xf4\x97\x06\x4e\x98\xf3\x7b\xac\x49\x5f\xe5\xa4\x12\x8f\xe5\x4c\x34\xd4\x1e\x68\x7b\x84\x90\x19\x9a\xfc\xf1\x43\x3f\x1d\x2d\xcd\xa4\x17\x09\xf4\x33\x88\x0b\x87\xd1\xac\x12\xa0\x75\x14\xcb\x38\xe9\x39\x1c\x3d\x51\x11\xb4\xaf\xa8\x0d\x63\x42\x28\xba\x07\xd2\x45\x35\x06\x15\x4f\xac\x59\x3d\x37\x49\xdd\x6e\x61\x29\x7b\xab\x61\xcc\x55\xa2\x35\xdf\xcc\x19\x46\xef\xe6\x9c\x1e\x66\xe7\x4f\x9b\xdd\x6f\xff\x4a\xcd\x15\xc2\xea\xb0\x98\x6a\xaf\x37\x03\x55\x2c\xbe\x7f\x13\xb5\xfc\x70\x93\x0a\xd6\x18\x46\x5c\xe6\x2f\x9f\x97\x53\xd3\x46\x66\x25\x91\x67\x99\x6a\xe8\x7f\x33\xb5\xbb\x49\x2b\x5f\xf8\x09\x2b\xeb\x81\x89\x33\x77\xfe\xd2\xcf\x3a\xb2\x70\x73\x90\xe0\xa7\x9c\xb5\x6c\xe8\x89\x4c\xec\xe7\xe4\x25\x9a\xf4\x39\xeb\x55\x75\x84\x31\xcc\xed\x47\x97\x46\xb3\xed\x98\x13\x88\x6a\x62\x7d\xab\xd0\xe5\xfb\xfd\x76\x99\x9b\x11\xef\x3f\xc9\x8c\x7b\xb6\x31\xe6\xe2\x52\x47\x8b\x39\x14\x7c\xf7\x2b\x00\x00\xff\xff\xa9\x52\x06\x45\xb3\x0a\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x09\x92\xf2\xb8\x0e\xbe\x92\x16\x6b\xf1\x71\xb2\xd8\xf7\x3f\xc2\x2b\x2f\x81\xa4\x03\x24\xa1\xa7\xe9\x9e\x7a\xd3\xd4\x0f\x94\x49\x6c\x59\xeb\x27\x59\xf9\x15\x1c\x14\x02\x08\x29\x40\x60\x45\x50\x04\x18\xb2\x98\x02\x00\x8b\x4d\x80\xf0\xe6\x5f\x04\x08\xca\xb9\xff\xa1\x3a\x28\xc3\x80\x21\x70\x44\x0c\x65\x9d\x31\x88\x95\x51\x24\x4f\x71\x4c\x5a\x47\x11\x53\x1f\xf5\x19\x39\x65\x6b\xa3\x21\xb7\x51\xa6\x34\xcb\x88\xd4\x46\x23\xf5\xd1\x94\x61\x82\x98\xea\x28\xa5\x3e\x1a\xe7\xe0\xe8\xc1\xeb\x28\x33\xb7\xd1\x01\xf3\xa8\xea\xb9\x8d\xce\xde\x47\x85\x07\x1c\xe6\x36\x1a\x70\xec\xa3\xce\x23\x8f\x73\x9b\x21\x84\xa9\x8d\x26\x13\xcc\x64\x6d\x17\xc1\x3b\x65\x79\x00\xb5\x48\x63\x1b\x9d\x40\x4c\xc6\xc2\x45\x87\x3c\xcb\xc8\xc1\x01\xa5\xec\xba\xfc\x72\x1f\x97\xca\xf1\x2c\x85\xff\x0e\xac\xc0\x5e\xf6\x05\x0e\x5e\xf8\x7f\xe3\xdf\xd1\x1f\x6a\x04\x05\x82\x72\x6f\xa4\x88\x11\xa4\xbe\x14\x41\x70\x14\x2d\xb4\x04\x10\x74\x70\x2e\xab\x63\x44\x5d\x3e\x1d\x8b\xfc\xcb\xbd\x4e\x28\xed\x75\x1f\x8b\xd4\x67\xea\xf7\x47\x04\x8e\x90\x79\xb5\x27\xa4\x61\xb7\x27\xe4\xa2\x4e\x12\xa6\xcd\xda\xa4\x50\x68\x6d\xef\xab\x35\xf0\x68\x05\x19\xf7\x2b\x94\x1d\xff\x1c\xd7\x24\x17\xca\x01\xd6\x54\xc4\xb4\xa7\x62\xc2\xc7\x54\x2c\xdc\x7d\xba\x82\x99\x6d\x78\xe3\x6a\x7b\xfa\x1e\x8d\xad\xe4\x65\x57\xf6\x7a\xe5\xda\xd5\x1a\xfa\x58\x66\x2e\x4f\xc6\xc3\x5e\x87\x9c\x3f\x40\x27\x2c\x3a\xec\x08\xec\x24\xe4\xec\xe8\x28\xb8\xd5\x33\x07\xc1\xbb\x4c\x8a\x3d\x34\x8b\x90\xb1\x5c\x8f\x4d\xd2\x34\x60\xb1\x6a\x27\xa8\xf7\x7b\x80\x3e\x47\x93\x70\x95\x1f\xb9\x16\xf9\x49\x97\x68\xac\xff\xbc\xeb\x25\x56\x8f\xd7\xe6\x9a\x52\x9f\x8b\xcb\xda\x5a\xf9\x51\xd7\x2f\x16\x52\xfc\xeb\x00\xbc\xb5\xc3\x6a\x0f\xa3\x40\xf4\x65\xf6\xfb\xeb\x85\x95\x50\xda\xeb\x27\xf3\x13\xfd\xfc\x8e\x95\x9c\xd2\x6f\x9f\xa6\x9d\x05\x31\xe7\x3d\x85\xe3\xf0\x33\x14\xae\xa4\x4c\x45\x3f\x36\x23\x35\xf2\x61\x06\xac\x52\x2d\xdc\x0c\xd0\xb9\xdf\x38\xdc\x64\xd9\xa2\xa3\x43\xe4\x3e\x2f\xae\xb5\xda\xb9\xc8\xd5\x03\x5b\x59\xa1\x79\xb1\x9b\x3e\x60\xbd\x83\x56\x1c\x99\xdc\xbe\x7a\xc3\x67\x9e\xf8\xd0\x23\x72\x0a\x3b\x4e\x06\x8c\x3f\xe7\x11\x91\x66\xd9\xc9\x33\x90\xed\xa9\x08\x4f\xe4\x79\xa4\x31\x28\x81\xf7\x2b\x88\xef\x57\xf0\xf9\x07\xf7\x19\x0d\xf7\x54\xc4\x7d\xfc\x09\x63\x7a\x73\x9f\x23\xc5\xfd\x0a\xd3\xb4\x5b\x41\xe0\x07\x6c\x77\xa1\x82\x80\x7c\xab\x8d\x0f\x62\xff\x13\x2d\x2c\x74\x96\x2b\x8a\x65\x54\xdf\x49\xe5\x9a\xf2\x8d\xea\x7b\xb9\xaf\xac\xd4\x7e\x05\x94\x10\xdb\xf7\x6a\x51\x05\x1b\x96\x91\xc5\xfb\x55\xa4\x08\x8d\x56\x01\xa7\x46\xd5\xeb\x2b\xbd\xca\xa8\xf0\x48\xad\xec\x25\xf4\xbd\x14\xfe\x39\xfd\x7c\xb4\x29\x9e\x40\x6e\xfe\xa2\xef\xfb\x60\x77\x85\xb7\x05\x62\x4b\x45\x80\x85\xa7\x96\xc1\x27\xb6\x38\xbc\x0b\xb2\x3b\x15\x10\x8a\x7f\xdb\x47\x40\x05\x0a\xeb\x08\x69\x59\xc9\x44\xa3\x4e\x16\x34\x6a\xe2\x81\xc0\x44\x93\x8e\x9a\x34\x9b\x69\x22\xd0\x6c\x44\x60\xa4\x62\xaa\x59\x47\x15\x0d\x04\x8a\x06\x06\x46\xf7\xd9\x2c\x6b\x36\x55\x31\xfa\x0e\xed\x4d\xbb\x9e\x68\xda\xbc\x48\xb4\xbe\x7f\x00\x43\xbc\x92\xea\x22\x4f\x47\x09\x8e\x45\xa2\x40\xcd\xca\x9d\x8b\x64\x81\xd0\x22\x88\x08\x2c\xba\x5b\x62\xc5\x53\xfd\xed\xd6\xa8\x75\x55\xe0\xfa\xfd\xc5\x0a\xed\xae\xfb\x1a\x0d\x41\x82\x3a\x32\x5c\xd9\x6b\xb1\x95\x34\x47\xa8\xeb\xad\xb2\xb3\x62\x3d\x7e\x69\x26\xcb\x66\x80\x28\xd3\x9c\x4c\x92\x42\x46\x1b\x49\x65\xb6\x04\x93\x24\x8e\x93\xd8\x30\x66\x0a\x3c\x4e\x8c\x3a\x59\x92\x89\xb2\xcf\x2e\x68\x86\xf3\xa0\xc3\x74\xf3\x3c\x60\x79\xab\x6f\xef\xeb\x52\x93\xe2\x57\x4d\x1a\x4a\x0e\xd3\xfc\x03\x5f\xf1\x5b\x4f\xac\xf9\x01\x26\x8f\xeb\x7b\x7c\x7f\xcf\x35\x8f\x7d\x9f\x0b\xa7\xe7\xbe\x72\x75\xd5\x7c\xea\xaa\x74\x70\xd5\x53\xff\xf5\x06\xf5\x15\x71\x49\xa8\x68\xb7\x62\xde\xe2\xff\xfa\x9c\x04\x5c\x31\x0f\xc5\x1a\xdd\x2e\xe1\xb0\x3d\x0a\xa3\xb3\xeb\xd4\x71\x9f\x5a\x75\xa0\x20\xf4\x8a\x52\x63\x41\x30\xf5\xfa\x92\x0b\x48\x28\xeb\x3b\x0b\x45\x5c\x62\x60\xbf\xab\x58\x48\x45\x79\xf1\xa6\x3b\xd4\x75\x27\x96\xec\xa1\x5a\xad\x50\xec\x9c\x5c\xe2\x6e\x99\x15\xeb\x1c\x83\x88\x79\xa1\x85\x7b\x7e\xd0\x30\xe3\xb8\xc2\x8c\x45\xf7\xac\x47\x36\x9f\xc3\x97\xc8\x76\x29\xae\x61\xcf\xc3\x14\x21\x2a\x7f\x2e\xe2\x60\x3c\x8a\x38\xe5\xd3\x54\x51\x27\x8d\xeb\xd8\xf2\x38\x9e\x6c\x2c\xfb\x45\x94\xa8\x5c\xa7\xaa\x03\x4d\x68\xab\xfd\xa7\xbf\xbd\xff\xa8\x41\x45\x53\xb9\xc2\x82\xc5\xef\xec\xbf\x23\xa0\x4b\x16\xfb\x0f\xc6\xca\x8a\xf5\xb6\x12\x50\x84\x61\xf8\x24\xff\xfd\x90\xff\x5f\xf4\x8d\x40\xc5\x5c\xa3\xb1\x05\xe3\x47\xeb\x1d\xf3\x3f\xe7\x23\xc4\xda\x31\x20\x74\x9e\x8c\x34\x7f\x90\x27\xe3\x21\x0a\x0c\x9a\x35\x13\xe8\xac\xa8\xc9\xe2\x9e\x4b\x6b\xce\x9c\xe3\x49\xe8\xb5\x96\xb5\xff\xbe\xe7\xbc\x1b\xed\xc1\x25\xef\x10\xf8\x6d\x0d\x5e\x6a\x3e\x4d\x9b\x9b\xaf\x6f\x28\x4c\xa4\xc6\xa8\xfb\xef\x97\x91\x61\xec\x15\x9c\x6b\xf8\xb0\xc7\x9c\xab\xe8\x70\x42\x71\xba\x8c\x0e\x09\xf9\x09\x3a\xc4\xdf\x43\x87\x8a\x1a\xaa\x8f\x7c\x03\x19\xee\xf4\xf5\x31\x3a\x84\x7b\xfe\x58\xdf\x2f\xe9\xdf\x2a\xd6\xcc\x18\x3f\x68\xd7\x76\x35\xd6\x58\x50\x34\x52\x53\xb1\x07\xbc\xbc\x12\x6b\x4e\xf8\x3a\x5c\x78\xf2\x51\xff\x2f\x87\x3c\x49\xd5\xd3\xbd\xf0\x6f\xef\xf0\xc4\x81\x7f\x39\x43\x7d\xee\x4b\x14\x21\x05\x15\xab\xbe\xa7\x7a\xe0\x5f\xa3\xf5\x29\x95\x32\x76\x6d\x49\xe9\x93\xf5\x91\xf9\x0d\xb4\xd0\x2a\x24\xaa\xb9\x5d\xa5\x46\xa0\xac\xb9\x20\xb8\x75\x7d\xc4\x48\x51\xd9\x42\xaf\xa6\x60\x99\xb9\x7c\x3b\xeb\xc5\xce\xd4\x47\x02\x31\xb7\xd1\x7b\xb6\x71\xf6\x1c\xc9\xfc\x8d\xd3\xdd\x5e\x01\x02\x2f\x7c\xfc\x29\x1d\xd2\x57\xe7\xce\x9d\x02\x0c\x5f\xcf\x26\xdb\xf9\x8c\x33\x30\xf0\x92\x89\x85\x9e\xe3\xb7\x0a\xe7\xa3\xb3\x9f\x62\xbd\x54\x22\xf5\x82\xcc\xf2\x60\x25\x43\x14\xec\x1a\x02\x4b\x6d\x7f\x73\xfe\x53\xef\x01\x2e\x14\x94\x7b\xee\x55\xcb\xfd\xd9\x8e\x97\x9c\x80\x04\x8b\x6d\x78\xa8\x9f\xe0\x84\xe6\x22\xb4\x39\x31\x00\x79\x22\xe9\x9a\x61\x42\xf7\xbc\xdc\xaa\x61\x2f\xce\x0e\x9e\x20\xf3\xf3\xd5\x8c\x47\x63\x0b\x9a\xaf\x89\xec\xe7\xbc\x79\x3e\xb4\xcf\x60\x62\x50\xe3\x1b\x2b\x5a\x68\xf5\xca\x6e\xb1\xc5\x56\xb9\x44\xbf\x96\x65\x9d\xf5\xe6\x09\x1e\xd5\x1e\x02\xbd\x3e\x8d\xbd\xe6\x53\x57\x32\xc2\x12\x22\x0f\x63\x2a\x12\x73\x6c\x5a\xf6\xe5\xfe\xaa\x17\xfb\xb1\x2f\x67\xb0\x97\x4e\x0d\xd6\xe7\xb9\x37\x5c\xfe\xa6\xe6\x6d\x11\xf5\x03\xc4\xbc\xe3\xea\x0a\xd9\x3e\xe0\xf8\xba\xd2\x4a\xfb\xd9\x7d\x3b\xfb\xf9\x5d\xdf\x57\xbd\xc2\xa9\x35\x35\x61\x47\x0d\x4e\x57\x70\xbb\x82\xee\x67\x98\xaf\xcd\xe0\xfb\x19\xd2\x95\xda\xf5\x70\x98\xe1\x7c\x92\xa3\xd3\x9a\x1a\x6a\x5e\x7b\xed\xc3\x15\x91\x74\xec\xb9\x12\x12\x8b\xb7\x33\xf9\x96\x69\xf9\x2d\x7b\xb3\x6c\x73\x1c\xa7\x2c\x93\x4e\xf3\x30\x27\x8e\x3e\x68\x18\x80\x41\x78\x88\x4e\x2e\x38\x4d\x69\x20\x98\x27\x27\x9b\xc7\x09\x19\x4c\xc2\x18\x93\xf9\x64\x13\xe3\xb0\xa9\x56\xaf\xbd\xcb\x1b\x59\xc9\x51\x3e\xe2\xd0\x7c\x53\xd9\xd7\x2d\x37\x41\xa4\x79\xfe\x52\x11\xbc\x94\x93\xdd\xb3\x14\x2c\x71\xeb\x73\x18\x0b\x2f\x57\xc4\x3a\x9a\xba\x23\xa8\x96\x01\x56\x1c\xc5\x1b\x8c\xf5\x04\xb5\x5f\x95\xc4\xc1\x19\x14\x5d\xaf\xbf\x7e\x02\x33\xdf\xe4\x19\xec\x83\x31\x99\x0e\x2b\x9c\x8f\xb1\xf1\x46\x9a\x53\x45\xc2\xa8\xc1\xe2\x5a\x9e\x15\x6f\x87\x92\xa5\x2a\xab\x5f\xb7\xad\x93\xf2\xc4\x9b\x4c\x7f\x2d\x0f\x3a\xef\x93\xaf\x9e\xcb\xe5\x30\x8d\x12\x02\x8f\x49\x55\xb3\x1b\x8d\x93\x0f\x26\x14\x39\xc5\x98\x88\x20\x0c\xc5\x8c\x92\xa4\x91\x67\x9a\x83\xcb\xec\xaa\x99\x12\xf2\x64\x69\x08\xdb\xca\xcb\x77\xa4\x71\xe1\x5c\xee\x37\x91\x6d\xaf\x53\xa0\x64\xfb\x53\x35\xd9\x3d\x86\x4d\xc5\xae\x08\x8a\x5c\xeb\xb9\x7d\x78\xc2\xe9\x7f\x65\x9d\xa2\x4b\x41\xc7\x4f\xe6\x17\xc3\xf5\xfc\xff\x55\x36\x7f\x4a\x0a\x04\x91\x07\xff\x45\x8d\x0f\x04\xb7\x7c\x17\xcd\x3e\x88\x05\x8e\x4f\xc7\x1e\x68\xbd\x98\x1b\x3c\xae\x9d\x9c\xd4\xfa\xc6\xe7\x57\xfd\x76\x8f\xf8\xcc\xed\xfb\xdf\xab\x95\xdd\xe2\xbe\x7f\xb2\x97\xe8\xd8\x56\x1e\xc8\x6e\x63\x3d\x6f\xd8\x4a\xe3\xc7\x7b\x76\xf2\xeb\xf2\xbb\xd4\x33\xf4\x9e\x8e\xf6\x1c\xf1\x27\xcf\x92\x7e\x2a\x8b\x7a\xa5\x1b\x67\xf5\xf5\x04\xb6\x40\x8c\x16\x37\x79\xd3\x1f\x46\xf3\x8a\x85\x47\x1f\xc4\xf2\x87\xa7\x25\x87\x58\x7e\xc1\x24\x15\x29\x6e\xfa\x03\xdf\x46\x8d\x5b\xf9\x1e\xf5\x07\xfe\x87\xe5\x4f\x62\xf9\xa0\xf2\x7f\x83\xe5\xc7\xf9\x6f\xf5\x57\xfc\x04\x96\xff\x4e\xc4\x78\xda\x0b\x78\xc3\x16\x93\xa5\x3f\x8e\x2d\xc4\x8a\x1e\xb3\x89\xed\x7a\x03\xfe\x85\x38\x7c\x66\xfd\x0f\x87\xbf\xd0\xd8\xa7\x9d\xb0\xcb\xfb\x77\xa4\xf8\xbc\x83\x76\xdd\xb7\x55\xe5\x94\xe0\x93\xf9\xe9\xb1\x67\x29\x99\x68\xb6\x32\x3e\xb7\x6e\x7e\x6b\xe7\x60\xd1\x58\x55\xe3\x56\x56\x3f\x8e\xb9\xdf\x38\x71\x78\x53\x2b\xfe\x91\x6e\xe5\x4b\xa7\xd2\xef\xf2\x84\x96\x5e\xe6\x7e\x06\x7d\xba\x5b\x19\x33\xc6\x75\xb7\x32\xa6\xfa\x84\xdf\x41\xb7\x72\xbd\xeb\x9b\xdd\xca\x98\xf2\xf4\xbc\x5b\x79\xd1\x1c\x80\xfb\x53\xc5\xc0\xed\xc4\xc9\x55\x86\xdc\x75\xab\x5b\x4c\x9e\x3e\xd8\x13\x75\xe2\x89\x97\xd7\x91\x24\x16\x84\x7b\x7b\x02\x46\xb6\x1d\x1d\xfb\x48\x73\x95\xf6\x23\x44\xfb\x63\xd9\xd6\x8b\x68\x79\x85\xf6\x43\xf4\x57\xb9\xf5\xea\x09\x8b\x57\x4f\x74\x5d\xeb\x57\xbc\x96\xd9\x2f\x1d\x0c\x04\x69\xfc\x4b\xc8\x66\x23\x99\xfc\x4f\x54\x18\x0b\x27\x2d\x4b\xd3\xf3\x32\x67\xb0\x68\xa0\x72\x6d\x67\x66\x57\xfb\x83\xae\x7a\x5f\x65\xa2\x48\x3e\xeb\xd8\x9e\xc2\xae\xfb\xe0\x75\xe7\xe9\x77\xfe\x07\x8a\x5b\xaf\x52\x93\xcd\x27\x9e\x41\xff\x44\x4d\xe1\xd6\xf3\xf4\xd0\xfb\x9a\x03\x8f\x28\x2d\x7e\x10\xe6\x2f\xcf\xe7\x16\xdf\x7c\xfb\x95\x60\x14\xe3\xb9\x9f\x0a\xa4\xf6\xad\x5f\x77\x7f\xfd\x6b\x74\xc9\xa7\x81\xc7\x10\xfc\x3f\x5d\x3a\xbb\xc6\x25\x5d\x62\x9c\x5f\xe8\x12\x33\x9e\xd3\xa5\x55\x7d\x80\x2a\x0e\xea\xfe\xbf\x3d\xbd\xd3\x3d\x34\x0b\x88\xe5\x24\x23\x84\xd8\x9e\xa5\xef\x77\x9f\xc5\x4f\x8f\x50\xcf\xfd\x39\xb3\x8a\xb0\xea\xff\x1f\xe3\xb4\x60\x2b\xe2\x18\x5b\xdf\x5f\xa5\xa7\xa0\x3a\xf6\xb2\x82\xb9\x48\xa5\x69\xb2\x85\x02\xe8\xbd\x31\xe5\x17\x27\x5c\x7e\xb5\x88\xb5\x5b\xa5\x5c\x83\x88\x7d\xbc\xb8\x77\xaa\xdd\x84\x72\x47\x69\x2b\xdc\x85\xc4\x43\xf5\xd8\x4b\xdf\x4a\x19\x99\xc3\xd2\xd1\x32\xdf\x3b\x5a\x6a\x35\x93\x38\x0f\x95\x1f\x63\xed\x22\xec\xab\x64\xed\xb2\x59\x30\x71\x7f\x0e\x15\xb0\xce\x91\xd6\x73\x94\x77\x80\x01\x55\x94\x6c\xb0\xc1\x88\x41\x9c\xc0\x2d\x8b\x88\x30\xe8\x18\x24\xbb\x8d\x43\x48\xc1\x38\xc4\xca\xd7\x28\x33\x0d\x90\x07\xf3\xa4\x88\x86\x21\xb0\x67\x81\x2c\x18\x02\x41\x9e\xa6\xca\xfa\xff\x05\x00\x00\xff\xff\xd7\x4d\x15\x3a\x52\x48\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd3\x41\x4b\xc3\x30\x14\x07\xf0\xef\xf2\xce\x39\x4d\x1d\x92\xa3\xe8\xc1\x83\x20\x6e\xe0\x61\xf4\xf0\xd2\xbe\x4a\x68\x9a\x84\xe4\x65\x2e\x8c\x7d\x77\x69\x99\x5b\x0f\xe2\x2a\xa2\xed\xad\xd0\xfc\x79\x3f\xfe\xbc\xb7\xd9\x43\xe9\x6c\x64\xb4\x0c\x92\x43\x22\x01\xda\xfa\xc4\x11\xe4\xa6\x10\x60\xb1\x25\x90\xc0\x8e\xd1\xac\x92\xf7\x26\x83\x00\x97\xf8\xf8\x62\xff\xf9\x00\x04\x70\xf6\xdd\x57\xd2\x96\x17\x37\x4b\x38\x14\x02\x3c\x66\x54\x86\x40\xd6\x68\x22\x09\x88\x8c\x4c\x4f\x89\x51\x69\xa3\x39\x83\x84\xad\xa6\xf7\x73\xb6\x4e\xb6\x64\xed\x2c\x1c\xc4\x37\xac\xd3\xd0\x0a\x19\xcf\x61\x95\x99\x62\x3f\xf6\xf8\x5b\x19\x6c\x68\xa1\x3a\xcc\x05\x73\x1f\xbd\x5a\xfc\x87\xd9\xa6\xf6\xeb\xae\x4e\x68\x57\x36\x6b\xdd\xd2\x8c\x7a\x1e\x65\x5e\xe9\x37\x4b\xe1\x92\x1a\xab\x2a\x50\x8c\xb3\x51\xaf\xfb\xc5\x2e\x5d\x18\xd5\xf7\xf2\xfa\x0f\xe1\x83\x6b\xdb\x3d\xec\xbc\x0e\xd8\x67\x26\x5f\x83\xa1\xeb\xf1\x7e\xfa\x53\x1a\x7a\x9e\x83\xdb\x52\xf5\xea\x42\x33\x7d\x4f\x3f\x5b\xbc\xb9\x35\x79\xd7\xa1\x5e\xa8\x1e\xa5\xba\xfd\x25\xaa\xf8\x08\x00\x00\xff\xff\x20\x8c\x4d\x0b\x76\x06\x00\x00")

func compiledExtensionAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionAbi,
		"compiled/Extension.abi",
	)
}

func compiledExtensionAbi() (*asset, error) {
	bytes, err := compiledExtensionAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x0d\x52\xeb\x3c\x0c\xbc\xd2\xca\xb2\x64\xe9\x38\xfe\xbd\xff\x11\xbe\x71\x9c\x02\x6d\xf8\xca\x4b\x1e\xaf\x0c\x61\x18\xe8\xc6\xd6\xcf\x6a\x23\x39\x55\x18\x14\x11\x12\x14\x88\xac\x04\x25\x20\x47\x49\x0a\x80\x25\x55\x10\x2e\x5e\x0e\x44\xe5\xb1\x5f\xa4\x06\x65\x32\x52\xb4\xd6\x28\x6e\x7e\x5c\xd2\x44\x39\x85\x28\x46\x71\xa1\x2d\xee\x68\x31\xf4\x9e\xc3\x86\x92\xec\x6b\x23\x86\x8f\x3c\xfa\x42\x3d\xef\x28\x0d\x47\x0a\xb4\xa1\x01\x69\xa1\x0a\x69\x43\xbc\x2e\x54\xea\x42\x3d\x57\xe1\x56\xca\x42\x6d\x5f\x5b\xcb\xd0\xd6\xea\xb2\x1b\xca\x6e\xb7\x49\x48\x9d\xe3\x8a\x2c\x74\x59\x68\x37\x88\x18\x2f\x6f\x1c\xba\x24\x29\x93\x2f\xc3\x68\x52\x38\x1a\x48\x66\x26\x45\x16\x8f\x0b\x97\x8d\xdb\xd2\xe7\x1e\x1b\xa2\x73\x4f\x84\x90\xc1\x82\xd1\xac\x40\x00\xc8\x49\x20\xb8\xdd\x71\x02\x3b\x06\x7f\xb4\xda\x71\xb0\x4a\x3c\xfd\x47\x03\x2b\xd8\x26\x2f\x30\x18\x58\x1c\xbb\x55\x58\x00\x3d\x20\x5b\xed\x69\x80\x26\xb2\xf9\x8a\xd8\xa3\x58\xfe\x1d\xd3\xd6\xd2\x87\xc1\xd9\x83\x6f\xd8\x7b\xb4\xc6\xc6\x5b\xfc\x91\xd3\xf4\xb0\xa2\xbf\xfd\x38\x6d\x3b\x82\xef\x9f\x95\x10\x59\xee\x33\x9f\x99\x90\x93\xde\xfe\x9e\x60\x82\xf4\xc8\x2f\x59\xfc\x8a\x89\x95\xc5\x5b\x44\x12\xdb\xe5\x5a\x50\xd6\x63\x04\x55\x4e\x46\xa0\xa4\xf7\x11\xa4\xb7\xa7\xe6\xab\x8b\xf4\xcc\xda\x13\x99\x05\xe2\x43\x66\x81\xc3\xd9\xcc\xda\x63\xb5\xd3\x31\xaa\xcf\xb0\x33\x91\xaa\x1d\x23\x4d\xa4\x84\xe4\xf1\x72\x65\x83\x7f\x92\xbf\x57\x25\x58\xc4\xb7\x29\x38\xd4\xa3\x7e\x42\x1d\xd3\x4b\xd7\xeb\xb1\x0f\x3a\x58\x65\xc2\xc9\xda\xb9\xd5\x6f\xcb\x93\x39\x1f\x23\xda\xc6\x4d\x8e\xe5\x41\xfb\x07\x35\x7c\xa9\x6b\x27\xbd\xb6\xeb\xeb\x0c\xb6\x29\x88\x33\xcf\x98\xb2\x78\x28\x6c\x5e\x77\x6b\xf4\x71\x06\xfe\xcd\x3c\xc5\xae\x01\xc4\xd5\xb1\xdf\x38\xe3\x59\xd1\x8d\xdd\x64\xe0\x42\x72\x63\x7d\x3c\xf4\x47\xc9\x83\xde\xee\x46\xb8\x24\x6e\xeb\x3e\xf7\xf5\xdf\xbe\x0e\xef\x6c\x4c\x3c\xc0\x88\xf6\x5d\x34\x3e\xda\x7c\x57\xd2\x9c\x16\x9f\x29\xc9\xd7\xaf\x5e\xe3\x32\xa7\x8e\x9c\x83\x19\xef\xd9\x86\x7f\xc1\xe6\x9a\x84\xdb\x3c\x0b\x36\xa7\x73\x90\x60\xbc\xcd\x39\xba\xd7\xc8\x7d\x9e\x93\xfb\x19\x19\x20\x65\xae\xbf\x71\x54\xc6\x3c\x27\xcc\x79\x38\xf7\x5b\xc4\x6e\x63\xb1\xb5\xe6\x60\xde\x7a\x93\xdc\xb1\xb4\xee\xcf\x99\x3c\x4f\x4b\xcb\x56\xaf\xbb\x2d\x9e\xbe\x75\x9b\xb9\x9b\xff\xf9\xf4\xcc\xec\x33\xf8\x13\x2d\x17\x81\x87\x5b\x1d\xff\x40\x2b\x82\xf2\x44\x2b\x32\xab\x7e\x5a\x2b\xc2\x72\x41\x2b\xeb\xd3\x45\xbd\x04\xce\xdd\xad\xfa\x3f\xd7\xcb\x9d\xdd\xbb\x53\xee\xa1\xa7\xfc\x09\xfb\x35\x3f\x63\xbf\xf5\x2b\xec\x8f\x78\x8e\xfd\xcf\xe6\xf0\x37\x54\xa4\xa0\x69\x1c\xe1\x97\x55\x44\x1f\xe7\xff\x5d\x45\x34\xa7\x0b\x15\xd1\xd2\x5e\xfd\x3c\x58\xb7\x8a\xc1\xfd\x97\xb1\x9f\x24\x3c\x61\x3f\xa9\x5e\x60\x3f\xa5\xfa\x6a\xf6\xab\x17\x93\x00\xf9\xf1\x93\x40\x1a\xcf\xfa\x8b\xe1\x4a\x7f\xb1\x70\xb6\xbf\x7c\xc8\xfe\xef\x4e\x05\x2d\x0b\x49\x8f\x3f\x7f\xc2\xb2\xc7\xf7\xbf\x7b\x5e\x4b\xbe\xc2\x6b\xc3\x2b\x4f\x58\x6c\x83\x13\x59\xf9\x71\x2e\x3d\xd6\x27\x5c\xba\xe2\x02\x97\x9e\xf4\x95\x5c\x86\x14\x73\x4c\x35\xfd\xb2\x6e\x9b\xe7\x9b\xc0\xff\x32\x9f\xa9\x5d\x60\x3e\x33\xbf\xba\xdb\xd2\xf0\xc0\xca\xf4\xe3\x4a\xce\x85\x9e\xf1\x59\xe5\x0a\x9f\xad\x5c\x53\x32\x90\x49\x45\x43\xca\x29\xa7\xc0\x90\xed\x8b\xc0\x68\x85\x53\xee\xf3\x68\xd0\x92\x35\x72\x71\x2a\x3d\xbb\x6b\x97\xdc\x8d\x89\x78\x94\x4a\x31\xf5\x41\x35\x66\x29\x9e\x5a\xd1\x51\xe0\xc1\x5a\x00\x82\xff\x17\x00\x00\xff\xff\x8e\xee\x0c\x13\x3a\x16\x00\x00")

func compiledExtensionBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionBinRuntime,
		"compiled/Extension.bin-runtime",
	)
}

func compiledExtensionBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x4b\xc3\x40\x10\x85\xff\xcb\x9c\xf7\x14\xb5\x48\x8e\xa2\x07\x0f\x82\x58\xc1\x43\x09\x32\x49\x26\xb2\x64\x33\xbb\xec\xce\xc6\x86\xd2\xff\x2e\x09\xd5\xa2\x04\x1b\x04\xd3\xdc\x72\x98\x37\xf3\xe5\xf1\xde\x6e\x76\x50\x58\x0e\x82\x2c\x90\x8a\x8f\xa4\x40\xb3\x8b\x12\x20\xdd\x64\x0a\x18\x1b\x82\x14\x18\x45\xb7\xf4\x2a\xdb\x1b\x63\x8b\xfa\x89\x2a\x50\x60\xa3\x1c\xe6\x76\x9f\x63\xa0\x40\x3a\xd7\x7f\xe5\x9d\x50\xb8\x86\x7d\xa6\xc0\x61\x87\xb9\x21\x48\x2b\x34\x81\x14\x04\x41\xa1\x87\x28\x98\x6b\xa3\xa5\x83\x14\x5a\x4d\xef\x47\x69\x15\xb9\x10\x6d\x19\xf6\xea\x17\xb6\xaf\x9b\x1c\x9b\xa3\x36\x6a\x96\x8b\x64\x38\xfb\x9d\x3c\xef\xb9\x9f\x75\x43\xa7\xc0\xfb\x0d\xab\xcb\x85\x81\xdf\xdf\x4e\xf2\xfb\xb0\x60\x39\xdc\x6b\xfd\xc6\xe4\x4f\xb1\x63\x59\x7a\x0a\xe1\x1f\xd9\x47\x82\xfc\xe8\x6d\x4b\xe5\x8b\xf5\xf5\x94\x44\x24\x57\xab\x59\xf1\xac\xa0\x59\x47\xe7\x4c\x77\x7e\xba\x3f\x35\x6d\xf8\x81\xc2\xfa\x05\xf5\xad\x44\xc1\x1f\x85\x19\xc5\xc7\x9a\x92\xbc\xb7\xf4\xec\x95\x1b\x89\xed\xdd\xd6\x69\x8f\x83\x74\x82\xb1\x73\xd3\xcd\xf5\x4e\x65\x1f\x01\x00\x00\xff\xff\x46\xf2\x90\x9d\xb6\x06\x00\x00")

func compiledExtensionnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeAbi,
		"compiled/ExtensionNative.abi",
	)
}

func compiledExtensionnativeAbi() (*asset, error) {
	bytes, err := compiledExtensionnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledExtensionnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeBinRuntime,
		"compiled/ExtensionNative.bin-runtime",
	)
}

func compiledExtensionnativeBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\x31\x0a\xc2\x40\x10\x85\xe1\xbb\xbc\x7a\x4e\xb0\x77\xf0\x04\x21\xc5\x24\x4c\x60\x20\xce\x2e\xbb\x6f\x94\x45\xbc\xbb\x58\xd9\x58\x88\xf5\x0f\xff\xb7\x3c\xb0\xd7\x18\xd4\x20\x0a\x7b\x9a\xc0\xa3\x25\x07\xca\xb2\x0a\x42\xaf\x86\x02\x8f\xb0\x0e\x41\x4d\x7e\x5a\xd3\xa9\xdb\x69\x28\x87\x9e\xc3\x04\x83\x4a\xbb\x24\x75\xf3\xd3\x39\x51\xd0\xb2\x1b\x04\x9c\xed\x3d\x39\x32\x76\x7a\x0d\x3c\xe5\x27\xb4\x26\xff\x41\x6f\x6e\xf7\x6f\xe8\xfa\x0a\x00\x00\xff\xff\x0a\x34\xa0\xdd\xeb\x00\x00\x00")

func compiledMeasureAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureAbi,
		"compiled/Measure.abi",
	)
}

func compiledMeasureAbi() (*asset, error) {
	bytes, err := compiledMeasureAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x50\xdb\x71\x04\x21\x0c\x6b\x49\x7e\xc9\xa6\x1c\x38\xd8\xfe\x4b\xc8\x70\xec\xe5\x92\xfc\x64\x26\x91\x3f\x76\x91\x35\x20\x89\x28\x10\x8e\x50\x02\x6e\x94\x7d\x6a\x91\x04\x60\x91\x0f\x08\xfe\x88\x06\x38\xed\xba\x21\x2c\xd0\xbc\xcf\x91\xa9\x4d\x9c\xf0\x15\xb9\xb9\xca\x87\xcd\x31\xb8\x39\x6a\x64\x8c\xfd\x76\xe1\x9a\x31\xcc\x0b\x12\x44\xdc\x8e\x0e\x1b\xe0\x73\x92\xc1\x18\xc0\x5b\xc7\xf9\x53\x97\x4e\x64\xbd\x74\xfb\x6b\xc8\x4f\x57\xbf\x41\xf8\xf6\xfc\x6c\x49\x4a\xbe\x66\xfa\x4f\x3f\xd0\x92\xd3\x3a\x64\x7b\xbe\xef\x47\x19\xac\x9e\x4c\x65\xc1\x86\xc4\xc9\x36\xc7\xf7\x6c\xd1\x2f\x79\xed\xd6\x8a\xb4\x79\xb6\xb6\xce\xdf\xad\x3a\x43\xa0\x0b\x83\x9a\x3d\x7b\xaa\x21\x4a\x41\x59\x61\x2c\xcc\xa9\xa1\xbe\xb3\xa4\x73\xda\x98\x97\x77\xf3\x25\x29\x83\xb3\xa5\x6a\x1f\x4d\xe3\x01\xf7\xba\x56\x53\x46\x36\x6d\x11\x05\x68\xfb\x08\x00\x00\xff\xff\xbe\x95\x40\x83\x40\x02\x00\x00")

func compiledMeasureBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureBinRuntime,
		"compiled/Measure.bin-runtime",
	)
}

func compiledMeasureBinRuntime() (*asset, error) {
	bytes, err := compiledMeasureBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x59\x76\xe4\x30\x08\xbc\x52\x01\x62\x3b\x8e\xac\xe5\xfe\x47\x98\x27\xdb\xbd\x24\x93\xe9\xc4\x3d\x2f\xf2\x87\xd4\x40\xb3\x54\x81\x64\x08\x18\x0a\x94\x0d\x28\x62\x04\x23\x40\x5d\xdd\x00\x88\x7a\x03\xe1\xcd\x95\x40\x31\x99\xe7\x22\x0b\x98\xb0\xcb\x2c\x59\x40\x65\x8f\xd3\xd4\x97\x34\x46\xad\x56\xdb\x29\x4d\x3f\xa4\x4d\x4a\x43\x0c\x3d\xa4\xbd\xa9\xeb\xb6\xb2\x0a\xcc\xae\x9b\x94\x00\xe9\xd2\x58\x1c\xd9\x1e\x72\xdd\x2b\x48\x5d\xf5\x04\xc4\x20\x41\xa0\x44\x20\x20\x4b\x0a\x4a\xb2\x84\x81\xd7\x11\xc9\xb9\x6b\x45\x3f\xcb\x74\xff\x8c\x40\x22\x6a\xba\x01\xcf\x51\xab\xfc\x1d\xb5\xd9\xb5\xa8\xf7\x08\xbc\x95\x15\x61\x67\x82\x02\xc1\x41\x8b\x91\xdd\x96\x76\x9b\x53\x93\x04\x49\x4c\x79\xce\x64\x7c\x51\xff\x24\x23\x88\xcd\x8f\x5e\xfd\xce\xc6\x77\x8b\xec\x8a\xed\xf7\xd9\xee\x28\x6e\x8f\x9c\xae\x78\x17\xb9\x62\x4d\x85\x74\xc7\x85\x7a\x5f\xb8\xac\x4c\x7c\x22\x9a\x78\xd6\x77\x5b\x19\x47\x85\x28\x58\x38\x9e\x2c\x2e\x96\x20\xc1\x4b\x43\xf5\x81\x41\xc0\xa7\xb1\xab\xa5\x35\x2f\x96\x36\xa4\x32\x4c\x3d\x4c\x4d\x5c\xbd\xd8\x74\x66\x38\x9b\x3a\x2d\xbb\x75\xb2\xf2\x39\x9e\xe2\x05\xa6\x6b\x02\x70\x05\x17\x13\x2e\x69\x35\xa5\x86\x84\x9c\xde\xe4\x79\x3e\xff\x67\xd6\xc1\x1f\x10\x92\x5b\xc7\xdf\xf6\x27\x74\x9e\x7b\x9b\xcf\x09\x00\xee\xf5\x85\xac\xd9\xd9\xfb\xd9\x03\xb2\x91\x9e\x7d\xce\xeb\xb6\x78\xee\x73\xad\x93\x1e\x5a\x87\xba\xf4\x43\x2f\xe3\x38\x9d\x76\xfb\x77\xf8\x5c\xb9\xf8\xe4\x18\xc2\xc5\x66\x40\x49\xa7\x36\x1a\x3d\xc3\x37\x12\x19\x93\x27\xa5\x14\xc9\x8d\xb5\xb6\xad\x5a\xd5\x61\x39\x99\x72\x44\xda\x6c\xd9\xc9\x33\xf8\xa7\x93\x5a\x8f\x0a\xed\xb8\xb9\xae\x32\xb6\x75\x52\x8c\x51\xef\x7c\xf1\x2f\xf1\xc5\xff\xe6\xeb\x56\x15\x7f\xcf\x90\x70\x7f\xc1\x90\x14\x7a\xcd\xd0\xe1\x7f\xc9\x19\x41\x74\xfe\xeb\xf6\x16\x1d\x3e\x1f\xb7\xaa\xd2\xd7\xb7\xe9\xda\xcf\x5f\x6f\xa2\x9e\x5c\xc9\x66\xaf\x67\xbd\xf4\x1b\x98\xff\x0c\xcf\xae\xaf\xf0\x1c\xf9\x0e\x9e\x73\xbe\x81\x27\xd6\x13\x56\xc9\xd4\xd8\xab\x57\x67\x81\x06\x43\x39\xcb\x56\xa9\xc5\x56\xdb\xa0\xec\x4e\xad\x36\xb5\x01\x1a\x61\x85\xd6\xc3\xe4\xe9\xc1\xc6\xac\xc3\x3c\xd5\xa9\x73\xd5\x3e\xc7\x56\x38\x33\x00\xce\x3f\x01\x00\x00\xff\xff\xa4\x31\x81\x1a\x82\x08\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x4e\xc3\x30\x10\x45\xef\x32\x6b\xaf\x8a\x60\x91\x3b\x70\x82\x2a\x42\x93\x74\x8a\x2c\xcc\x38\xca\xfc\x09\x58\x55\xef\x8e\x5a\x51\x27\x10\xa4\x88\x2e\x2d\x7f\xfb\xbf\xf7\xf7\x27\xea\xb3\x1a\x58\x41\xcd\x91\x93\x49\xa0\xa8\x83\xc3\xa8\xd9\x9f\x48\xf9\x5d\xa8\xa1\x37\x29\x14\x08\x65\xb8\x1c\xba\x02\xb1\x87\x1d\x9d\x43\xbd\x9f\x38\xb9\xcc\x09\x8f\x8a\xdd\xe3\x13\x9d\xdb\x70\x4b\x28\x23\x4e\xf2\x62\x02\x0a\x94\x1d\xdf\x0d\x6d\xa0\x81\x0b\x77\x49\x6a\xbb\x81\x21\xcf\x0e\xee\x62\x8a\x28\x97\xb7\x59\x6f\xa1\x5a\x71\x74\xed\x11\xb3\x5e\x29\x66\x03\x8c\xbe\x14\x58\xf5\xcb\xa7\xf4\x8e\x3c\xfe\x80\xa8\x1a\xf3\xf7\x7c\x38\x8c\x62\x76\x35\xd8\x06\x9c\xa2\x7c\xfc\x17\x6d\x63\xdb\x15\xf9\xeb\xaf\xe5\xfe\x80\x5e\xce\x7e\x3f\x74\xfb\x15\x00\x00\xff\xff\x4b\xb6\x04\x06\x13\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x8f\xda\x30\x10\xfd\x2f\x3e\xe7\x44\xd5\x1e\x72\x45\xea\x8d\xaa\x6a\xd5\x13\x42\xd5\xc4\x19\xa8\x85\x33\x8e\x3c\x63\x50\x84\xfa\xdf\x57\xa0\x25\x31\x4b\x84\x77\xf9\xd8\x84\x23\xe2\x4d\x3c\xcf\xf3\xde\xf3\xcc\x77\x4a\x3b\x62\x01\x12\x95\x2f\xc1\x32\x66\xca\x50\x1d\x84\x55\x3e\xdf\x29\x82\x0a\x55\xae\xfe\x32\xda\xa5\xca\x94\x34\xf5\xfe\x27\x94\xa5\x47\x66\xf5\x3f\xeb\x10\x84\xdb\x19\xb0\xa0\xef\x81\x2d\xb2\x23\x8c\x51\x5a\x94\x0b\xf2\x7a\xce\x22\x53\x35\x34\x50\x58\x6c\x7b\x60\x01\xc1\x59\x10\x28\x8c\x35\xd2\xa8\x5c\x91\xa3\x23\xa8\x3d\x61\x19\x48\x8b\x71\x74\xe8\xa4\xe3\x21\x3e\x5c\x4b\x23\x70\x82\x81\xe1\x3f\xfc\xa6\xfd\xb6\xba\x2b\x2c\x9c\xb3\x87\xaa\x34\xaf\x8d\xc1\xed\x23\x19\xad\xb1\x89\xfa\x6a\x04\xf9\xcb\xe4\x64\x24\xe2\x3c\xac\xf0\xbb\x4b\x93\x8a\x8a\x87\xe7\x55\x58\xa7\xd7\x3f\x42\x55\xc4\x03\x0b\x86\x64\xf2\xf5\x5b\xcc\x0f\x09\xfd\xaa\x49\x71\x8b\x0b\xef\xc4\xed\x16\x37\x25\x65\xe8\xb1\x72\x1b\x3c\x93\xe2\xd0\x4e\xea\x1a\xd4\xc1\x7b\x24\xf9\x5d\x3b\xe2\xb4\xb4\xe2\x0f\x8c\xe0\xfa\xb5\xc7\xd2\x48\x8f\x3a\x22\x8c\x47\xed\x36\xe8\x9b\x5f\x20\x78\x51\x80\x8c\x32\x3d\x7c\xef\xa7\x05\x7a\xe8\xb4\x6e\xa1\xcc\xed\xa0\x2e\xa5\xb7\x45\xdd\x3b\xd2\xa1\x75\x77\x45\x2e\x14\x60\x81\x34\x3e\x43\x30\x44\x13\x18\xe1\xdd\x47\x9e\xef\x97\xf9\xee\xf4\xff\x8b\xb6\x4a\xbb\x6a\x04\xf1\x90\x4c\x67\x28\xcb\x11\x47\xf3\x3f\xe0\xa9\x2b\x93\xca\x1f\x7a\x87\xe9\x1a\xae\xce\x57\xc6\xcf\x79\x43\x1e\xb9\x48\xee\x01\xd3\xa3\x21\x9e\x28\x82\x02\x8d\x31\x84\x3e\xf8\x92\x19\x7e\xe7\x62\x72\x07\x13\x2c\x5e\x02\x00\x00\xff\xff\xc1\xa7\x82\x58\x64\x0d\x00\x00")

func compiledPrototypeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeAbi,
		"compiled/Prototype.abi",
	)
}

func compiledPrototypeAbi() (*asset, error) {
	bytes, err := compiledPrototypeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x0b\x76\xe2\x3c\x0f\xdd\x92\x64\x3d\xbd\x1c\x3f\xf7\xbf\x84\xff\x38\x49\xa1\x6d\x3a\x29\x0e\x03\x3f\x67\x3e\xe0\xcc\x61\x10\xf1\x43\xbe\x57\x57\x96\x5d\x05\x07\x05\x06\x09\x0a\xc0\xa4\x08\x8a\x00\x1d\xc5\x14\x00\x48\xac\x00\xc2\xc9\x57\x04\x60\xa5\xbe\xbd\x50\x1d\x94\x00\xc9\x3c\x8b\x23\x2f\xe3\xa8\xd8\x62\x0d\x95\xa9\x96\xd5\x8a\x12\x37\x2b\x37\x4b\x2c\xb6\x5a\x2b\xaf\x56\x6c\x51\x72\x63\x59\xac\x81\x71\xb5\x86\x10\x83\x57\xcd\xab\x35\x85\xcd\x4a\xd5\x8b\xd5\xd5\x4a\x20\xab\x95\x54\x62\xf7\x56\x57\xab\xfb\x66\x75\xc3\x14\xfb\xf6\x6c\xed\xab\x55\xab\x17\x97\x98\x16\x2b\xf3\xd6\xaf\xa9\x16\xee\xb4\xce\x8c\x13\xad\x56\x87\xda\x59\x32\xaf\xd6\xb6\xf9\xe6\x25\x51\x66\x5e\x7d\x13\xde\xbc\x88\x42\x5e\x38\xd3\x6a\x4d\xb6\x59\x5b\x45\xa1\x02\x8b\x55\x61\x1b\xad\xc4\xc2\xbd\x30\xae\x56\xdf\xbc\x28\xb5\x86\x14\x63\x5f\xad\xbd\xac\xd6\xea\x46\x44\xa9\x2c\x56\xa3\x2e\x26\x79\x20\xe9\xd0\xab\x64\x62\x07\x94\xb1\x9a\xa3\xef\xab\x5d\x60\x59\xf7\x61\x61\x07\x52\x20\x47\xc0\x08\x0e\x3e\x38\x70\xc1\xf0\xb7\x17\x6a\x1c\xd3\x86\xd1\x36\x86\xb8\xf4\x70\x5f\x7b\x59\xde\xc3\x97\x9c\x44\x25\x03\x7c\xf6\x42\x65\xef\x45\x4e\x2f\xec\x85\xa7\x36\xbc\x58\x22\x0e\x1d\x3c\xa0\xac\x6f\xc7\x11\x81\x4b\x1b\x5c\x9e\xdd\x9e\x88\x08\x14\xa1\xd3\x67\xaf\x1b\xec\xbc\x0e\x81\x1e\xe3\xf5\x18\x07\xe3\x81\x47\xb1\x84\xaf\x1e\x7d\xb4\xf8\xf8\x9c\xf0\x2c\x70\xdd\x7b\xe6\xe5\x31\x9e\xfd\xd1\xa3\x94\xbf\x79\x34\xe3\x41\x6a\x3b\x0f\x08\x1e\x84\xcd\x5f\x61\x64\x4e\xba\x8b\x2b\x42\xdc\x7b\xc1\xfa\xf7\xbd\xb8\xcc\xa2\x12\x7e\x5d\xf3\x99\x5e\x67\x9e\x9d\xc0\x92\x22\xef\x57\xa1\xd6\xe7\xb0\xf1\x90\xa1\x0d\x61\x8f\x59\xcb\xbb\xd9\x32\xc3\x0b\x33\xaf\x35\xdc\x79\xc1\xbc\x8f\x1f\xf6\x27\xad\xf9\xc7\xcc\x10\xb4\x9c\x56\x00\x4e\x7d\xef\x41\xe3\xc7\xc5\x0e\xa2\xee\xd9\xc0\x7d\x9f\xdf\x25\x3c\x20\xbf\x5f\x66\x11\xda\xd7\x08\xa6\xeb\x9a\x7d\x59\xbf\xb0\xb5\xf8\xf3\x0a\x8a\xec\xf3\x9b\x24\x79\x5d\x26\x23\x95\xb2\x43\x40\x32\xed\xbd\x68\xfe\x40\x04\xa4\xe9\xdd\x7b\x0b\x85\x7d\xfc\x29\x3f\x20\x7f\x5d\x66\xad\x45\x5e\x4e\xf9\x35\xee\xf3\x9f\xb6\x07\xe4\xbf\xbf\xb6\x8a\xa3\x4e\x3a\xab\x58\x06\xbe\xf3\xd6\xe8\x01\x9a\x7b\x99\xad\x67\xdf\xc5\x8b\xf1\x3e\x7f\x59\x7a\xe1\xfc\x85\x89\xe2\xd9\x78\x1b\xbe\x15\xf2\xa0\x88\x99\xeb\xe8\x85\x60\x66\x4e\x4a\x98\x3c\x87\x64\xc1\xc9\x69\xeb\x9f\x3e\xd7\xda\xf7\xd4\xed\xb0\xb1\x07\x18\x16\x25\x7f\x7c\x44\x3e\x25\xea\x2f\x99\x07\xe0\x9a\xa5\x06\xaf\x16\xd6\x99\x03\x65\x94\x8d\x8d\x1e\xbf\xe5\x4f\x49\x1d\xaf\xbf\x26\x95\x35\x42\x06\x9b\xda\xfa\xbf\xed\xb9\xeb\x5b\xd7\xca\x7b\x16\x59\x42\x25\x84\x58\x9d\x9d\xdf\xc8\xde\x32\xc6\x15\xd9\xf0\x3b\xb2\xd1\xfa\x01\xb2\x31\xd2\x31\xb2\x6b\xff\xc3\x1e\xc0\x11\xb7\x56\x29\x7e\xee\xf3\xaa\x54\x82\x3f\xab\xc7\xf8\x1c\xdf\xef\xe1\x49\x88\x8d\x5a\xef\xe1\x5f\xe1\xc9\xc1\xb9\xc1\x0c\xbe\x49\x8f\xf0\x4d\x7e\x06\xdf\x14\xff\x0f\xf8\x62\xa8\x02\xa1\xff\x33\x3a\xf0\x79\xee\x5f\x4e\x85\xcf\xe1\x9c\x95\x0e\x70\xce\x66\x27\x70\xce\x5e\xef\xc4\x19\x21\xa7\x7e\x4f\x5e\x8f\xd9\xb9\x97\x98\xdf\x79\xfd\xd6\x31\xa6\x58\x53\xac\x1d\xb0\xa6\x8c\xac\x3f\xcd\x9a\x92\x7c\x8e\x35\x63\x8f\xa8\x08\x35\x2c\x6c\x1b\x3d\x5a\x07\x2f\x64\x31\x9d\x86\xf6\x0b\xb2\x70\xad\xbb\x81\x3c\x8c\x5f\xf0\x73\x3d\x0e\xd6\x35\x98\x68\xd4\x62\xac\x51\x1b\xa5\x30\x0a\x9c\x6e\x1c\x40\x31\xc0\x08\x1e\x15\x0b\xc7\xe3\x09\x1c\xec\x72\x3f\x56\xed\xa4\xfa\x49\x0b\x89\x2d\x5d\xa3\x20\x3c\x28\x0a\x9e\x58\x6f\xde\xc0\xcf\x5a\x8e\xf8\x59\xdb\x19\x7e\xd6\x3e\xc9\xcf\x45\xd5\xd6\x6f\xab\xa6\x35\x8c\x4e\xe7\x35\x4d\x33\xd7\x02\xb9\x8c\x4c\x76\xc9\x65\xfc\x20\x3c\xf9\x09\xaa\xf6\xa7\xb3\x2d\xba\xe2\x70\x43\x8d\xd1\x0a\x1f\x60\xdd\xaa\xdf\x50\x63\x5c\x10\x6a\xe9\x9e\xac\xa3\x92\x34\x57\x7d\x57\x93\x37\x8f\x31\x95\x75\x7a\x8e\x07\x48\xf7\x52\x4f\x44\x75\x6f\x74\x26\xeb\x2c\x17\xc8\xcf\xcb\x3a\x3a\x95\x75\xc8\x40\xbb\x36\x23\xed\x3f\xe7\x9e\x47\x67\x9d\x0c\x0d\xdd\x39\xbd\xf7\xdc\x3f\xf1\x18\x11\xeb\x9f\x79\x8c\x48\x38\xcf\x63\x44\xb6\xfb\xf6\xdc\xb3\x18\xb7\xe8\x99\xba\xb3\x07\x7a\x6b\xdd\x4d\x63\x4c\x71\x24\x84\x83\xfa\x1b\x03\x9f\xa8\xbf\x31\xc8\x64\xfd\xbd\x69\x5d\xa8\xed\x89\x5a\x97\x7e\xd5\x3a\xd4\x62\x41\x45\x51\xd9\xe2\x77\xbd\x53\x51\xfe\x3e\xde\x0d\x5a\xa7\x1f\x7f\xdf\x33\xaf\x75\x85\x73\xa8\x7e\x51\xba\x7f\x60\x87\xcd\x0b\x27\x0e\xd8\x49\x47\xf5\x1f\xd2\xed\xf5\x1f\x5f\xd9\x49\xb7\xd7\x7f\x07\xaa\x86\x5f\xfe\x7d\xa0\x8a\x33\xeb\x81\xbc\xde\x3f\x28\x22\x4b\x7e\x22\xf3\xe5\x57\xe6\x47\x6d\xa6\x83\xff\x1a\x95\x7f\xab\x2f\x6f\x61\xfe\xf0\x51\xf9\x9e\x3d\xaf\x47\xac\xef\x1b\x94\x99\x31\xa6\xf2\x80\xd0\xc1\xf9\x1c\x0a\x9f\x38\x9f\x43\x91\xc9\xf3\xb9\x2d\x1a\xa4\x85\x97\xda\xf3\x7e\xcb\x03\xe3\x53\xf9\xbb\xfe\xcf\x44\xc3\x5d\x27\x2d\x51\x53\xef\x59\xfe\x5b\x27\x2d\xa8\x7e\xc4\x4f\x8d\x67\xf8\xa9\xe9\xcc\xf9\xf1\xf5\xa4\xe5\x04\x7a\x20\x31\x0a\xb4\xf8\x1f\x43\xcf\xf4\xe0\x7e\x16\xcd\x7e\xb9\x9f\xfd\x11\x3d\xf3\xf2\x6c\xf4\x4a\xe5\x1e\x02\xf8\xbf\x52\x6f\xbe\x58\x0e\x72\x93\x03\x96\xb8\xc7\x13\x2c\xf1\xd8\x9f\x5b\xaf\x02\x27\x6b\xd5\xfc\x5d\xaf\xde\x3a\xc6\x14\x47\xa2\xdb\x01\x47\x62\xcc\x27\x38\x12\x33\x9e\xda\xa7\xa4\xb1\x29\x7e\xa1\x7d\xca\x76\x36\x77\x5c\xa7\x7e\x1e\xef\xf6\x7a\x75\xfe\x3e\xc8\x15\x03\xe6\xb7\x52\xde\x3a\xc6\x54\x14\x64\x48\x07\x51\x90\xb1\x9d\x88\x82\x4c\x7c\xa7\x52\x4e\x21\x31\x5b\x2b\x3b\x28\x62\x19\xd1\x2f\x30\x37\xd2\x7b\x8f\x76\x13\xa7\x0a\x1d\xdc\x6f\x61\xe1\x5f\xee\xb7\x7e\xe4\x54\x91\x36\xc7\xa9\x39\x4e\x48\xde\x94\xb8\xf4\x27\x9e\x9f\x04\xf8\x4d\x89\x8d\x54\xb4\xa8\x06\x18\x0a\x1c\x40\xab\xa2\x91\xb1\xca\xf8\x36\x34\xd9\x70\xb4\x59\xd5\xf9\x56\x25\x06\x48\xa8\xa2\xc1\x92\x25\x0b\x04\xe2\x61\x3c\xd7\xcc\x1a\x04\x2b\xa8\x1a\x4d\x93\x20\x4a\x49\xd5\x43\x6f\x99\x0d\xb8\x48\x36\x0b\x2e\x3d\x5b\xcb\xd9\x20\xeb\xa8\x64\x33\x2b\x3a\x40\x05\x08\xf1\x7f\x01\x00\x00\xff\xff\x14\xf6\x46\xaf\x54\x3a\x00\x00")

func compiledPrototypeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeBinRuntime,
		"compiled/Prototype.bin-runtime",
	)
}

func compiledPrototypeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x3f\x6b\x84\x40\x10\xc5\xbf\xcb\x90\xd2\xca\x90\x14\xb6\xa9\x03\x21\x21\x95\x58\xcc\xb9\x73\xb0\xa0\xb3\xb2\x33\xeb\xdd\x22\x7e\xf7\xe3\xe4\xf0\x1f\xda\x78\xd7\xee\xce\xfb\xbd\x1f\x2f\xef\x00\xd9\x71\xac\x5d\x10\xc8\xce\x58\x09\x25\x60\xb9\x09\x2a\x90\xe5\x1d\x58\x36\x74\x25\x33\x7e\x31\xd6\x04\x19\x30\x5d\xbe\x51\x94\x3c\x24\xa0\xb1\xb9\x3f\xa1\x31\x9e\x44\xa0\x2f\xc6\xab\xb7\xf5\x0d\xb5\xc4\x0a\x7d\x72\xac\xb4\xf4\x64\xac\x4e\xb4\x60\x59\xd3\x8f\xcf\x81\xb7\x13\xf1\x54\xba\x96\x7c\xfc\x45\xa5\x8d\xe0\x4c\xf5\x6b\x80\xff\x54\xc8\xc7\x75\xd5\x87\xa9\x3a\xc8\xe6\x3a\xfb\xae\x58\xaa\x75\xb3\xf6\x53\x54\x92\xf7\x74\x61\xf9\x2f\xcf\xcc\xb9\xf0\x93\xc6\xb1\xb8\xd7\x2b\xfe\xad\xb9\x0f\xcb\xe2\x16\x00\x00\xff\xff\xa4\xcf\xdd\xbb\x6b\x02\x00\x00")

func compiledPrototypeeventAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventAbi,
		"compiled/PrototypeEvent.abi",
	)
}

func compiledPrototypeeventAbi() (*asset, error) {
	bytes, err := compiledPrototypeeventAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x0b\x01\x00\x31\x08\x02\xd0\x4a\x1c\x53\x64\x71\xdc\xaf\x7f\x84\x7b\x82\x21\x04\x92\x02\x60\xbc\x03\xf4\xa7\x14\xab\xab\x8b\x03\x69\x22\x99\x12\x43\x9f\xac\xb1\x3c\x87\xc9\xda\x75\x8e\xd1\xf1\x32\x87\x62\xea\xf0\xbb\xcc\xbe\xb8\x0e\x60\x3c\xab\xf7\x9a\x0b\x5b\x01\x70\xfe\x01\x00\x00\xff\xff\xb2\x7b\x1a\x9d\x6a\x00\x00\x00")

func compiledPrototypeeventBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventBinRuntime,
		"compiled/PrototypeEvent.bin-runtime",
	)
}

func compiledPrototypeeventBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeeventBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4f\xeb\x9b\x40\x10\xfd\x2e\x7b\xf6\xf4\x2b\xed\x21\xb7\x36\xd0\x5b\x4a\x69\xe9\x29\x84\x32\xae\x93\x74\xc9\x3a\x2b\x3b\xb3\x06\x09\xfd\xee\xc5\x80\x51\xaa\x54\x4d\xfd\x93\x1c\x85\x99\xf1\x3d\xde\xec\x7b\xb3\xbf\x2a\xed\x88\x05\x48\xd4\xe6\x08\x96\x31\x52\x86\xb2\x20\xac\x36\xfb\xab\x22\x48\x51\x6d\x14\xa3\x3d\xaa\x48\x49\x91\x95\x5f\x90\x24\x1e\x99\xd5\xef\xa8\x2e\xc8\x1c\xb1\xf3\x1d\x35\x87\xa8\xaa\x21\x10\x93\xe3\xcf\x40\x75\xb1\x0b\xf2\xf7\xaf\xea\x11\xb1\x73\xf6\xd6\x9f\x41\x01\xb1\xc5\x3b\x3e\x16\x10\xdc\x05\x81\xd8\x58\x23\x45\x39\xda\x51\x55\x74\x6f\x3f\x06\xd2\x62\x1c\xdd\x60\xd6\x1c\xc5\x87\x31\x14\x5b\xf0\x53\x60\xc1\x5e\xec\xcd\xfe\x7e\xf8\xb9\xc1\xcb\xd4\xc0\x6b\x6d\x62\xeb\xf4\xf9\x4b\x48\x63\x6c\xe8\x13\x0c\xc9\xbb\xb7\x0e\x7e\x48\xe8\x4f\xc5\x47\xf9\x54\x76\xf5\xd1\x2c\xa7\xbc\xbd\xff\x30\x25\xcd\xc7\x77\x90\xf0\xb2\xab\xc4\xe9\x95\x91\x51\x76\x6d\x25\x57\x5e\xb6\x9a\xcb\x19\x8b\xc6\x43\x28\x04\xb9\x53\x2c\x16\xe7\xe1\x84\x9f\x07\x3c\xa6\xc6\x8c\xb5\x17\x32\xf0\x30\x8d\x0c\xff\xe0\xfe\xa7\x36\xc2\x26\xe6\xa0\xd5\x42\xfd\x0b\x78\xeb\x12\x7c\x35\xd8\x3a\x78\x8f\x24\xdf\x87\x79\xf3\x33\xf9\xdb\x88\xec\x31\x3c\x90\xdf\xd4\xea\x2c\x92\xac\x8c\x16\xf5\x50\x05\xe7\x49\xd7\xc7\x79\x6a\x8f\x89\x91\x8e\x68\xa9\x4b\x3c\x6a\x97\xa3\x2f\xbe\x81\x60\x77\x06\xb5\x3c\x7e\x7b\x9b\xfa\xd5\x02\xcd\xea\xf3\x8f\xd3\x1e\xea\x85\x90\x24\x13\x9b\xe1\x53\xd1\xf3\x98\xba\x1c\xd7\x63\xf8\xdf\xee\xd9\xbd\x67\xff\x3a\x99\xa2\x65\xee\xa9\x85\xce\xc6\x18\x2c\x90\xc6\xf5\xee\xc6\xd9\xaf\x91\xb2\x6e\x5b\x99\xd4\xeb\x5c\xc5\x63\xf2\x63\xe1\xe4\x38\xfc\x09\x00\x00\xff\xff\xb1\x59\x01\xf8\x7d\x0e\x00\x00")

func compiledPrototypenativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeAbi,
		"compiled/PrototypeNative.abi",
	)
}

func compiledPrototypenativeAbi() (*asset, error) {
	bytes, err := compiledPrototypenativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeBinRuntime,
		"compiled/PrototypeNative.bin-runtime",
	)
}

func compiledPrototypenativeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypenativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTraderAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x94\xc1\x6e\x83\x40\x0c\x44\xff\xc5\xe7\x3d\xb5\x37\xfe\x21\xb7\xde\x22\x54\x19\xd6\x44\xab\x12\x1b\xad\xbd\x14\x14\xf1\xef\x55\xa2\xc0\x52\x29\x4d\xaa\xa8\x4d\xae\xc8\xeb\x79\x33\x1a\xbc\x3d\x40\x2d\xac\x86\x6c\x50\x34\xd8\x2a\x39\x08\xdc\x25\x53\x28\xb6\x07\x60\xdc\x13\x14\xf0\x8e\x75\x2d\x89\xed\x2d\xa2\xa7\x08\x0e\x6c\xec\x8e\xdf\xd1\xfb\x48\xaa\x30\xb9\x3c\x1a\x3c\xb1\x05\x1b\xf3\x54\x35\x1a\xe9\xeb\x0b\x4c\xa5\x9b\xa7\xd0\x7b\x70\x20\xc9\xce\x4a\xa5\x83\x0e\x47\xac\x5a\x5a\x28\xd4\xd0\x68\x93\x0c\xab\xd0\x1e\xd7\x15\xc0\xc2\xf3\xd0\xb2\xbb\x49\x5c\x5b\x10\x3e\x21\x64\x27\x16\xd3\xda\x48\x16\x6e\x42\x54\xfb\x26\xbd\x90\x5f\xb0\xf5\x2b\xac\x3e\xd0\xe7\x4d\xa0\xfb\xa3\xcd\xec\x91\x7a\xf9\xa0\x47\xe6\x76\x0f\x25\xd3\xf0\x8c\x80\xff\x80\x7c\x47\x3f\x80\xb7\x41\x8d\xfc\xaa\xd0\x22\xed\xba\xf3\xd7\x2b\xff\x3f\x06\x33\x36\x0d\x54\x27\x93\xf8\xb0\xd0\x91\x85\xc7\xbd\x24\xbd\x54\xeb\xc0\x9e\x06\xf2\x33\xef\xfc\xbf\xdf\xbe\x1f\xcb\xc3\xf3\xce\xe5\xe5\x49\xf7\xda\x31\xd9\x20\xe3\x6e\xd5\x6d\xea\x89\x0d\xa6\xf2\x2b\x00\x00\xff\xff\xcd\xf4\xcb\x25\xdc\x04\x00\x00")

func compiledTraderAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTraderAbi,
		"compiled/Trader.abi",
	)
}

func compiledTraderAbi() (*asset, error) {
	bytes, err := compiledTraderAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Trader.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTraderBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x0b\x72\xeb\x36\x0c\xbc\x12\x3e\xc4\x82\x3c\x0e\xbf\xf7\x3f\x42\x87\x92\xfc\xab\x5e\x6c\x4b\x4d\xdc\x4c\x2b\x8f\xc7\x0e\x44\x91\xc0\x02\x8b\x45\x0c\x8a\x04\x0a\x64\x02\xa2\xa0\x60\x02\x13\x79\x34\x07\x11\xa9\x79\x25\xa6\x93\x57\x22\x0a\xd0\xb1\x5d\x8c\x48\x50\x69\x16\xa9\x0f\x70\x58\xce\x69\xe6\xd3\xaa\x6d\x84\xd6\x46\x58\xad\xb5\xaf\x56\x0f\x39\x0e\x26\x5d\xac\x2c\xb6\x5a\x73\x71\xed\xca\xeb\x0e\x8c\xb8\x5a\xab\x94\x2a\x7d\xd4\xd5\xda\xcb\x66\xd5\x50\x29\x76\x5b\xac\x62\x66\x6e\x65\xc6\x15\x69\x34\x2b\x1a\x22\xb1\xcd\x13\x63\x5a\xe3\x5d\xed\xb6\x60\x50\xeb\x44\x24\x92\x82\x34\x32\x71\xa2\x48\x71\x22\x72\x8d\xe8\xd5\xc5\x48\x04\x12\x9a\xcf\x26\x49\xcb\x0e\x6a\xf3\x1c\x4e\xfb\x7b\xb6\xbc\xa6\x9f\xb9\x1a\xac\x10\xdd\x7b\xd8\xf2\xde\xc3\xbe\xa4\x4b\x79\xae\x5e\x72\xc8\x91\xa2\x1c\xf1\xef\xc8\xda\xc8\xb3\x46\x16\x8f\x79\xf1\x74\x3b\x31\x31\x69\xa2\xa1\x77\xde\xb2\xf2\xce\x5b\x06\xbe\x1f\xcf\x2b\x66\x68\xbe\xc3\x8c\x3d\xec\xbd\xc8\xe9\x07\xbd\x48\x5a\x7f\x5f\x2e\x86\xef\x50\x10\xf9\x81\xda\xbe\xa2\x90\xb9\x3c\xa0\xa0\x6c\xeb\xeb\xe6\x75\x94\x0b\x0b\x2e\x9f\x77\x11\xc9\xb6\xd3\xd7\x31\x09\xf6\xf5\x25\xc8\x60\x2a\x84\xdf\x92\x81\xc5\xbf\x43\xe7\x73\x58\x71\x02\x93\x6a\x99\x11\xce\x3d\x7d\x50\xac\xea\x29\x9f\x6d\xc3\xb4\xfa\x4a\x81\x26\x22\x74\xc9\x40\x64\xd2\x28\xf3\x0e\x8f\xbb\xcc\x90\x0f\x88\x1b\x12\xaa\x07\x24\x74\xcd\x42\xf3\xd3\x01\x46\x45\x42\x10\x02\x43\xa1\x18\x6e\xe8\x1e\x84\x3c\xb8\x80\x11\x60\x2e\xeb\x79\x46\x4f\xd0\x69\x2b\x3a\x20\x62\x92\xc8\x97\x1a\xb8\x8f\xbf\x7c\x32\xfe\x74\x38\xfe\x34\x63\x9d\xb1\x23\x79\xf0\xb4\x3f\xef\x65\xfc\x4c\x5a\xf5\x56\xb1\x47\xea\x44\xf5\x78\x55\x81\x29\xc0\x3e\x88\x69\x7e\x89\xa9\x79\x84\x41\xdd\x3c\x60\xb8\x08\xb9\xc0\x9c\xe7\xba\xf9\x0d\xe1\x28\xa6\x4a\x47\x70\x81\xb2\xb4\x94\x4a\x95\xa8\x51\xb7\xdd\xf4\x7e\x5e\xf9\x27\xb3\xcf\xac\xeb\x3b\x84\x0e\x65\xec\x5c\x1f\x7a\xaf\xa7\x0a\xdd\xfa\xf2\xec\xfd\x4b\x97\xf2\x48\x5a\xd8\xb6\xee\x6a\x4c\x8f\xdd\xd5\xf2\xe0\xdb\x5d\x09\xe6\xda\xd6\xfb\xda\xd7\x6f\xdb\xba\xbb\xbe\x3d\xed\x42\x91\x79\x7b\x4a\x1f\xe6\x97\x9b\xe6\x18\xff\x59\x47\xb6\x9a\xb5\x32\x3e\x58\xb3\xfe\xb2\x66\x19\x75\xa9\x4d\x46\xf0\xb4\xd5\x70\x72\xf5\xe0\xfa\xe7\xf3\x5e\xd5\x6c\xe4\x43\x95\x31\x26\x88\x95\x42\xe8\xad\x53\xc7\xb0\x5a\x5a\x2a\x49\x23\x85\xa6\xc5\x05\x14\x5b\x08\xc2\x95\x07\xac\x86\x12\x87\x26\xa4\x51\x55\xbc\xd2\x60\xf4\x6b\xf6\x67\x7c\xb3\x63\x87\xbf\x33\xed\x18\x9e\xd7\xf8\x76\xd1\xe5\xb5\xe6\xb0\xf6\xfa\xa3\xdc\x1c\x4c\x4e\xbd\x5e\xfc\xe5\x9f\xe0\xe5\x5b\x6c\x40\xf2\x27\x6c\x40\x2e\x27\xd8\x80\xca\xc7\xd8\x90\xd6\x37\x16\xdd\x40\x1b\x1f\xd5\x8d\xc9\x8a\x5f\xa4\x1b\x8f\x2a\xe1\xba\x57\x92\x2f\x6b\xf4\x9b\x74\xa3\xa7\x05\xff\x3a\x3b\xee\xb2\x97\xfc\x90\x6a\x7c\x70\x7a\x7d\x83\x09\x91\xeb\x13\x26\x44\xa5\x13\x4c\x88\x73\x64\x3c\xa1\x0b\xb1\x7e\x72\x3e\xd4\x97\xba\xd0\x31\xe6\x1c\x3c\xe7\xc3\xa9\x06\xcf\x7b\xea\x5b\xba\x70\xa8\x26\xbf\x57\x17\x16\x5e\x01\x03\xe5\x9c\x36\xbc\xa1\x0b\x27\x55\x21\x37\xcd\x0d\xbd\x5d\xe7\xb5\xff\x07\xf3\x52\x4b\x4f\x98\x97\x7a\x3b\xc1\xbc\x3c\xff\xdd\x3f\xac\x41\xeb\x5f\xb8\xfc\x8a\x76\xb8\x73\x76\x80\x42\x9c\xb4\xff\xcf\xe4\x2f\x2c\x98\x3d\xc9\x5e\x2e\xf1\x49\xf6\x72\xad\xef\x66\x2f\xdc\x65\xaf\xcb\xbb\xd9\x7b\x92\x51\x7e\x78\x9f\xe4\x64\x92\xcc\x18\x2d\xff\xeb\x93\x5a\xc1\x33\x7d\x2a\xf1\x8c\x3e\x95\x74\x50\x9f\x2e\x93\x1a\x51\x66\x18\xc4\xb3\x67\x17\x25\x8b\x42\x36\x72\xc8\x5a\xc0\x96\x52\x33\xa4\xd0\x6a\x67\xa7\x9c\x89\x3d\x9b\x79\x45\x41\xb7\x41\xc5\x63\x1e\x08\x8d\x3b\x49\x18\x41\x29\x55\x10\x15\x26\x92\xf4\x57\x00\x00\x00\xff\xff\x8f\xb5\x7f\x25\xb0\x17\x00\x00")

func compiledTraderBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTraderBinRuntime,
		"compiled/Trader.bin-runtime",
	)
}

func compiledTraderBinRuntime() (*asset, error) {
	bytes, err := compiledTraderBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Trader.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTradernativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\xc1\x4a\xc3\x40\x10\x86\xdf\x65\xce\x7b\xd2\x5b\xde\xc1\x9b\xb7\x52\x64\xb2\x3b\x91\xc5\x38\x13\x76\xff\x8d\x0d\xa5\xef\x2e\x46\x9a\x06\x57\x68\x2d\xa8\xbd\x26\xff\x30\xdf\xc7\xfc\xbb\xd9\x93\x37\xcd\x60\x05\x35\x1d\xf7\x59\x1c\x45\x1d\x0a\x32\x35\x9b\x3d\x29\xbf\x0a\x35\xc4\xde\x5b\x51\x3c\x26\x0e\x92\xc8\x11\xa6\x61\xfe\x1c\x42\x92\x9c\xe9\xe0\x96\x64\x0c\xa2\x88\x98\x4e\xa1\x76\x82\xe4\xfb\x3b\x3a\x6c\xdd\x31\xa4\x8c\x38\xca\x13\x87\x40\x8e\xac\xe0\xeb\xba\xd5\xb0\x59\x3f\x4f\x0e\x3c\x71\xdb\xcb\xc2\x98\xc1\x90\x87\x02\x6e\x63\xff\xb1\xae\x21\x35\x3d\x86\x96\xf1\xae\xa8\x47\x34\x9d\x09\x4f\x9e\x48\x65\xad\x59\x81\xc9\x4e\x7c\x81\xa5\x73\x74\x8b\xff\x45\x80\x63\x94\xb7\x9f\xa2\x5d\x7c\x81\xca\x41\x65\x87\x7f\xe0\xbf\xba\x42\x95\x40\x92\xd1\x5e\xe4\x26\x0a\x72\xbd\xc4\xb3\x9c\x3d\xc2\xa7\x81\xfb\xee\xcf\xea\xe5\xfc\x4e\xbd\x2a\xde\x2e\xa6\xfc\x47\xb5\xd9\xbe\x07\x00\x00\xff\xff\xc5\xbf\x50\xfa\x7b\x04\x00\x00")

func compiledTradernativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTradernativeAbi,
		"compiled/TraderNative.abi",
	)
}

func compiledTradernativeAbi() (*asset, error) {
	bytes, err := compiledTradernativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/TraderNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTradernativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTradernativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTradernativeBinRuntime,
		"compiled/TraderNative.bin-runtime",
	)
}

func compiledTradernativeBinRuntime() (*asset, error) {
	bytes, err := compiledTradernativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/TraderNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/AuthorityNative.abi": compiledAuthoritynativeAbi,
	"compiled/AuthorityNative.bin-runtime": compiledAuthoritynativeBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/EnergyNative.abi": compiledEnergynativeAbi,
	"compiled/EnergyNative.bin-runtime": compiledEnergynativeBinRuntime,
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Extension.abi": compiledExtensionAbi,
	"compiled/Extension.bin-runtime": compiledExtensionBinRuntime,
	"compiled/ExtensionNative.abi": compiledExtensionnativeAbi,
	"compiled/ExtensionNative.bin-runtime": compiledExtensionnativeBinRuntime,
	"compiled/Measure.abi": compiledMeasureAbi,
	"compiled/Measure.bin-runtime": compiledMeasureBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,
	"compiled/Prototype.abi": compiledPrototypeAbi,
	"compiled/Prototype.bin-runtime": compiledPrototypeBinRuntime,
	"compiled/PrototypeEvent.abi": compiledPrototypeeventAbi,
	"compiled/PrototypeEvent.bin-runtime": compiledPrototypeeventBinRuntime,
	"compiled/PrototypeNative.abi": compiledPrototypenativeAbi,
	"compiled/PrototypeNative.bin-runtime": compiledPrototypenativeBinRuntime,
	"compiled/Trader.abi": compiledTraderAbi,
	"compiled/Trader.bin-runtime": compiledTraderBinRuntime,
	"compiled/TraderNative.abi": compiledTradernativeAbi,
	"compiled/TraderNative.bin-runtime": compiledTradernativeBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"AuthorityNative.abi": &bintree{compiledAuthoritynativeAbi, map[string]*bintree{}},
		"AuthorityNative.bin-runtime": &bintree{compiledAuthoritynativeBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"EnergyNative.abi": &bintree{compiledEnergynativeAbi, map[string]*bintree{}},
		"EnergyNative.bin-runtime": &bintree{compiledEnergynativeBinRuntime, map[string]*bintree{}},
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Extension.abi": &bintree{compiledExtensionAbi, map[string]*bintree{}},
		"Extension.bin-runtime": &bintree{compiledExtensionBinRuntime, map[string]*bintree{}},
		"ExtensionNative.abi": &bintree{compiledExtensionnativeAbi, map[string]*bintree{}},
		"ExtensionNative.bin-runtime": &bintree{compiledExtensionnativeBinRuntime, map[string]*bintree{}},
		"Measure.abi": &bintree{compiledMeasureAbi, map[string]*bintree{}},
		"Measure.bin-runtime": &bintree{compiledMeasureBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime": &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Prototype.abi": &bintree{compiledPrototypeAbi, map[string]*bintree{}},
		"Prototype.bin-runtime": &bintree{compiledPrototypeBinRuntime, map[string]*bintree{}},
		"PrototypeEvent.abi": &bintree{compiledPrototypeeventAbi, map[string]*bintree{}},
		"PrototypeEvent.bin-runtime": &bintree{compiledPrototypeeventBinRuntime, map[string]*bintree{}},
		"PrototypeNative.abi": &bintree{compiledPrototypenativeAbi, map[string]*bintree{}},
		"PrototypeNative.bin-runtime": &bintree{compiledPrototypenativeBinRuntime, map[string]*bintree{}},
		"Trader.abi": &bintree{compiledTraderAbi, map[string]*bintree{}},
		"Trader.bin-runtime": &bintree{compiledTraderBinRuntime, map[string]*bintree{}},
		"TraderNative.abi": &bintree{compiledTradernativeAbi, map[string]*bintree{}},
		"TraderNative.bin-runtime": &bintree{compiledTradernativeBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

